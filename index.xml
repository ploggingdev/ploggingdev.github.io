<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plogging Dev</title>
    <link>https://www.ploggingdev.com/</link>
    <description>Recent content on Plogging Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Plogging Dev - Powered by &lt;a href=&#39;https://gohugo.io/&#39;&gt;Hugo&lt;/a&gt; Theme by &lt;a href=&#39;https://github.com/ribice/kiss&#39;&gt;Kiss&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 08 Jul 2018 01:01:38 -0400</lastBuildDate>
    
        <atom:link href="https://www.ploggingdev.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thoughts on Reddit and it&#39;s redesign</title>
      <link>https://www.ploggingdev.com/2018/07/thoughts-on-reddit-and-its-redesign/</link>
      <pubDate>Sun, 08 Jul 2018 01:01:38 -0400</pubDate>
      
      <guid>https://www.ploggingdev.com/2018/07/thoughts-on-reddit-and-its-redesign/</guid>
      <description>&lt;p&gt;I opted in to reddit&amp;rsquo;s redesign and used it for an entire month to see how it compares to the existing design. After a month of using the redesigned site, I went back to the old design. I wanted to share my experience using the redesigned site, what works, what doesn&amp;rsquo;t and try and understand some of the motivations for redesigning the entire site.&lt;/p&gt;

&lt;p&gt;A little context is required to understand why reddit is redesigning the entire site. Reddit CEO Steve Huffman was asked about the goals of the redesign and this is what he had to &lt;a href=&#34;https://www.reddit.com/r/announcements/comments/7a4bjo/time_for_my_quarterly_inquisition_reddit_ceo_here/dp70sul/&#34;&gt;say&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a variety of goals, but chief among them is decreasing the bounce rate of first-time visitors and increasing time on site for everyone.&lt;/p&gt;

&lt;p&gt;More generally, Reddit grows primarily through word of mouth. Many of us evangelize Reddit and tell people how awesome it is, what an impact it&amp;rsquo;s made in their life, how much it makes them laugh, etc, and then when those new people decide to check out Reddit for the first time they&amp;rsquo;re greeted with dystopian Craigslist. We&amp;rsquo;d like to fix that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s important to point out that reddit is a venture backed company that raised &lt;a href=&#34;https://redditblog.com/2014/09/30/fundraising-for-reddit/&#34;&gt;$50 million in 2014&lt;/a&gt; and &lt;a href=&#34;https://www.recode.net/2017/7/31/16037126/reddit-funding-200-million-valuation-steve-huffman-alexis-ohanian&#34;&gt;$200 million in 2017&lt;/a&gt;. It&amp;rsquo;s valued at $1.8 billion and makes &lt;a href=&#34;https://www.cnbc.com/2018/06/29/how-reddit-plans-to-make-money-through-advertising.html&#34;&gt;$100 million&lt;/a&gt; in annual revenue. Reddit is slowly turning into an ad business. While there&amp;rsquo;s nothing wrong with being an ad supported business, the circumstances of taking on a lot of VC money, having a lot of users and having relatively low revenue can only mean that we will start seeing more invasive user tracking (going closed source does not help), targeted ads and eventually video ads. As a VC backed business, the end goal is to reach a liquidity event : either IPO or get acquired. Based on the Recode post, they seem to be leaning towards an IPO, though not in the near future.&lt;/p&gt;

&lt;p&gt;So how does redesign help with the goals of growing the userbase and reaching a liquidity event?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Makes the site approachable for first time visitors&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The redesign lends itself well for native ads design wise&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By introducing native video support, there&amp;rsquo;s a clear path to video ads which have much higher revenue potential and at that point a liquidity event becomes a logical next step.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this context in mind, the redesign will make a lot more sense, so let&amp;rsquo;s start exploring the new site.&lt;/p&gt;

&lt;p&gt;You can opt in to the redesign by going to your &lt;em&gt;Preferences&lt;/em&gt; page and selecting the &lt;em&gt;Use the redesign as my default experience&lt;/em&gt; option.&lt;/p&gt;

&lt;p&gt;There are 3 different views to choose from :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Classic view&lt;/em&gt; : This was the default view when I was logged in. As the name suggests, it looks similar to the old design and the thumbnail previews are of a similar size. The content density is lower in the redesign. On my 1366*768 laptop display, the old design displays 9 posts on the home page, while the &lt;code&gt;Classic&lt;/code&gt; view displays 6 posts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Compact view&lt;/em&gt; : There are no thumbnail previews in this view and 11 posts are visible on the homepage, so it&amp;rsquo;s better than the old design in terms of content density.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Card view&lt;/em&gt; : This looks a lot like Facebook&amp;rsquo;s News Feed. Images, gifs and video previews often occupy the entire page so it requires a lot of scrolling. This is the default view for users who are logged out. Here&amp;rsquo;s an &lt;a href=&#34;https://imgur.com/TtVAiMN&#34;&gt;example&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of scrolling, the redesign uses infinite scrolling, so once you reach the bottom of the page, the next set of posts are automatically loaded. The redesign also uses a modern looking font. Inspecting the page reveals &lt;code&gt;font-family: IBMPlexSans, sans-serif;&lt;/code&gt; on my GNU/linux based system. Keeping in mind reddit&amp;rsquo;s goals to decrease bounce rate of first time users and to increase the time spent on the site for everyone, the default card view for first time visitors and infinite scrolling make sense.&lt;/p&gt;

&lt;p&gt;Once I started scrolling, I noticed that the navbar is now fixed, on desktop and mobile displays. I personally don&amp;rsquo;t like a fixed navbar since it occupies precious screen real estate, especially on small screens. There is also no option to turn off the fixed navbar. Having reread the previous sentence, it occured to me that I haven&amp;rsquo;t ever come across such an option. Let me know in the comments if you have come across such an option on other websites.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll go over some of the issues with the redesign in no particular order. There are a lot of smaller issues and bugs in the software that I won&amp;rsquo;t cover, I&amp;rsquo;ll focus on what I feel are the important ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download the app!&lt;/strong&gt; This is the single most annoying part of using reddit while I am logged out on mobile. The popups and buttons come in a number of designs, but they have one thing in common : they are extremely annoying, almost as if an engineer decided to troll all users who don&amp;rsquo;t have the app.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;p&gt;I opened reddit.com on my phone&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/reddit1.jpg&#34; alt=&#34;reddit initial load on mobile&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I scrolled down and clicked on a link&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/reddit2.jpg&#34; alt=&#34;reddit I clicked on a link&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on &lt;em&gt;Not now&lt;/em&gt; and the link opens&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/reddit3.jpg&#34; alt=&#34;reddit annoying popup after link loads&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Annoying right? There are many variations of this, but I don&amp;rsquo;t currently have screenshots for them. I&amp;rsquo;ll describe another variant : there&amp;rsquo;s a popup which links to the app that is fixed to the bottom part of the screen with an &lt;em&gt;x&lt;/em&gt; button to dismiss it. This popup has to be dismissed for &lt;em&gt;every&lt;/em&gt; single page that I open on mobile. It does not remember that I have clicked the dismiss button. There&amp;rsquo;s another variant where there&amp;rsquo;s a banner ad before the comments load. This ad persists even after clicking on the button to dismiss the link to the app. And did you notice that the navbar has a link to download the app?&lt;/p&gt;

&lt;p&gt;My take on this : don&amp;rsquo;t push your app in such an annoying way. It&amp;rsquo;s annoying and actively prevents me from using the mobile website. It&amp;rsquo;s possible to let users know that the app exists and that they should use it without being annoying about it. As an example : once I dismiss the prompt to download the app, remember my preference for 24 hours before displaying another prompt. Besides, there&amp;rsquo;s a prominent link in the navbar, so users know that the app exists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dark patterns&lt;/strong&gt; : In the images above, did you notice that the button to download the app is massive while the link to dismissive it is tiny? The design makes it very easy to accidentally click on the large button.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another dark pattern in the signup flow :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/dark_login.png&#34; alt=&#34;reddit annoying popup after link loads&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The first screen makes users think that an email address is mandatory to sign up, but clicking &lt;em&gt;Next&lt;/em&gt; without entering an email address works and takes you to a screen to enter a username and password. I am slightly embarrassed to admit that I fell for the dark pattern, so good job to whoever decided to implement it, it&amp;rsquo;s incredibly effective.&lt;/p&gt;

&lt;p&gt;Here are a few links that made it to the top of r/assholedesign (comment &lt;a href=&#34;https://news.ycombinator.com/item?id=17446841&#34;&gt;source&lt;/a&gt;) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/assholedesign/comments/85liof/how_reddit_tries_making_ads_look_like_any_other/&#34;&gt;How Reddit tries making ads look like any other post is so infuriating&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/assholedesign/comments/8k10c7/not_gonna_download_the_reddit_app_artificial_load/&#34;&gt;Not gonna download the reddit app? Artificial load times for you! it never ends&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/assholedesign/comments/8m53bi/reddit_mobile_now_notifies_me_about_subreddits_im/&#34;&gt;Reddit mobile now notifies me about subreddits I’m not following. Thanks guys!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt; : This is not going to be a rigorous test, mostly just my subjective experience. The redesign makes 103 requests and loads 732 KB of data while the old design makes 51 requests and loads 184 KB of data to load the home page while I&amp;rsquo;m logged in. The exact requests and data loaded will be different each time, but it should give you a rough idea of what to expect in terms of performance.&lt;/p&gt;

&lt;p&gt;If you are on a reasonably fast network connection, you might notice that initial page loads take a little longer but navigating between pages is faster because it&amp;rsquo;s now an SPA. Where the performance hit is noticeable, is on slower connections and high latency connections such as 3g/4g. As an example : when I started using the redesign, the list of subscribed subreddits were loaded on demand, so when I was on a slow network connection it sometimes took a couple of seconds to go from clicking on the button to bring up the subreddits and the list of subreddits appearing on the page. It was a bad user experience. Thankfully, this has now been changed and the list of subreddits are preloaded. The performance is getting a lot better over time. Here is one such &lt;a href=&#34;https://www.reddit.com/r/redesign/comments/8smbob/an_update_on_performance/&#34;&gt;post&lt;/a&gt; going over some of the changes.&lt;/p&gt;

&lt;p&gt;Here is another post that talks about the performance of the redesign and the old design : &lt;a href=&#34;https://www.reddit.com/r/redesign/comments/8mkou1/performance_results_loading_rredesign_with_old/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The entire post and comments are worth reading, quoting a portion of the top comment :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another key thing is unless you&amp;rsquo;re just hitting one page and leaving, there is a &lt;em&gt;huge&lt;/em&gt; reduction in bytes going from page-to-page in the redesign:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;new.reddit.com&lt;/th&gt;
&lt;th&gt;old.reddit.com&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Page 1 Bytes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.2KB&lt;/td&gt;
&lt;td&gt;40.5KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Back to /r/redesign index&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.7KB&lt;/td&gt;
&lt;td&gt;56.8KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Page 2 Bytes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.5KB&lt;/td&gt;
&lt;td&gt;42.4KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Back to /r/redesign index&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5KB&lt;/td&gt;
&lt;td&gt;56.2KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Page 3 Bytes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.4KB&lt;/td&gt;
&lt;td&gt;43.7KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So the benefits of an SPA are evident if you primarily navigate within a single tab. But if you instead open links in a new tab and quickly cycle through them (like I do), the redesign loads more data and makes more http requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suggested posts&lt;/strong&gt; : During the month of using the redesign, I came across suggested posts when I was logged out. Example : when I visit a subreddit &lt;em&gt;r/test&lt;/em&gt; and open a link, after the top comment, there were 5-10 suggested posts which are links to other discussion threads on the same subreddit, and after this the remaining comments followed. I did not like the suggested posts as it was mostly a distraction while reading the comments. I tried to open a subreddit post while logged out to capture a screenshot, but it looks like reddit does not display suggested posts too often. Hopefully they stop with the suggested posts experiment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Following users&lt;/strong&gt; : I think the option to follow users was introduced when they introduced the new profile pages. While it seems like a harmless extra feature at this point, I hope they don&amp;rsquo;t pursue this direction. I&amp;rsquo;m struggling for words here, but it essentially turns reddit into a social network. Following users, profile pictures, bios and slowly building a personal brand on reddit will become a thing, like twitter and facebook. One of the reasons I like reddit is it&amp;rsquo;s somewhat pseudonymous user base and a focus on shared interests through subreddits instead of focusing on individuals. Turning it into a pseudo social network puts me off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Privacy&lt;/strong&gt; : When the new user profiles were first introduced, it was possible to see the list of subreddits a user was subscribed to and there was no option to turn it off. Thankfully this is no longer the case.&lt;/p&gt;

&lt;p&gt;There have been at least 3 reported instances on r/privacy of reddit resetting the tracking preferences of users. My privacy preferences were reset once and I had to opt out of tracking in the settings page. While the reasons behind these incidents are not known, this is not something that should ever happen.&lt;/p&gt;

&lt;p&gt;While I have not looked into this much, many users are reporting that the new UI uses session replay tracking everywhere with no option to disable it unless you use an extension to block this behaviour. &lt;a href=&#34;https://old.reddit.com/r/privacy/comments/8mmybp/psa_the_reddit_redesigned_ui_is_worse_for_privacy/&#34;&gt;Here&lt;/a&gt; is one such post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comment collapsing&lt;/strong&gt; : I was not able to find a button to collapse comment threads in the redesign. Collapsing comments is an incredibly useful feature for hiding threads I&amp;rsquo;m not interested in, quickly scanning the top level comments and so on. Here&amp;rsquo;s hoping it&amp;rsquo;s just a missing feature and not a design choice. &lt;strong&gt;Update&lt;/strong&gt; : Comments can be collapsed using the blue line on the left side of the comment. I find the old design to be much more usable, where there&amp;rsquo;s a clear &lt;em&gt;-&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;I tried to cover some of the issues with the redesign that matter most to me, an an end user. There are quite a few more issues, missing features and bugs that are expected in a beta release, but I won&amp;rsquo;t be going over them.&lt;/p&gt;

&lt;p&gt;So, what&amp;rsquo;s my takeaway having used the redesign for a month? Given the goals of the redesign stated by Steve Huffman, they have done a pretty good job. Here are my suggestions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Do not push your app so hard. Constantly reminding users that your app exists is reasonable (maybe once a day?), but making me dismiss the popup for the app on every page load is a little too much to take, so I&amp;rsquo;ve stopped visiting reddit from my phone.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not employ dark patterns in reddit&amp;rsquo;s UI. While they might be very effective at increasing the percentage of new users who give their email during signup, it makes users lose a little trust in reddit the company and that can&amp;rsquo;t be a good thing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t push too hard for engagement with the suggested posts. It makes the experience of browsing the comments terrible. Try and stick to a no nonsense design as much as possible.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not try and turn reddit into a pseudo social network. Let the focus remain on communities with a shared interest, not individual users.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dial down the tracking and session replay scripts, or at least offer a way to opt out. And please don&amp;rsquo;t reset my privacy settings without informing me. Ever.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I still prefer the old design, mainly because of better performance (given that I open new tabs instead of navigating back and forth), better content density, maybe a little familiarity with the old design and just the general straight forward experience.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts on this topic in the comments section below! You can also find me in my chat room &lt;a href=&#34;https://www.hackerschat.net/&#34;&gt;Hackers Chat&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The strange launch of Hackers Chat</title>
      <link>https://www.ploggingdev.com/2018/01/the-strange-launch-of-hackers-chat/</link>
      <pubDate>Sun, 21 Jan 2018 01:04:38 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2018/01/the-strange-launch-of-hackers-chat/</guid>
      <description>&lt;p&gt;I recently launched &lt;a href=&#34;https://www.hackerschat.net/&#34;&gt;Hackers Chat&lt;/a&gt; as an experiment to build the community site that I wish existed : public chat room based communites, pseudonymous users, transparent moderation logs, an open source code base and a site that is welcoming to non-technical users. I launched it as a single chat room for all discussions and support for user created chat rooms will be added shortly. An analogy might help : &lt;em&gt;Reddit for chat rooms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I originally launched the site under the name &lt;a href=&#34;https://www.boredhackers.com&#34;&gt;Bored Hackers&lt;/a&gt; , on the 1st of January, 2018 to an underwhelming response. The site didn&amp;rsquo;t get traction in any of the communities where I posted, yet what followed was an interesting series of events. Someone noticed that the chat room didn&amp;rsquo;t have basic anti-spam measures and posted a link to 4chan asking for help in spamming the chat room. Soon, the trolls and spammers showed up and started posting links to porn, messages about Hitler and other offensive content.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It didn&amp;rsquo;t take long for the conversation to go downhill since they succeeded in provoking most of us. I started manually deleting the troll accounts but it didn&amp;rsquo;t help much since creating an account was as simple as entering a username, email id and password. There was no email verification or any rate limiting. They created new accounts, started the conversation with &amp;ldquo;You ban me [insert cuss word]&amp;rdquo; and continued doing what they do best.&lt;/p&gt;

&lt;p&gt;While I was playing Whac-A-Mole with the trolls, something else happened, they started using scripts to automate spamming. The Bee Movie script is popular with trolls for some reason and the chat room was suddenly filled with thousands of spam messages and it was not possible to keep track of the messages legitimate users were sending. What didn&amp;rsquo;t help was that my javascript scrolled to the bottom everytime there was a new chat message (fixed now) so it wasn&amp;rsquo;t possible to scroll and read the chat history. After sending a few messages informing users to close this chat room and come back in a few hours once I fixed the situation, it was acknowledged by most of the users. But no one closed the chat room since it was fun to watch the train wreck in real time.&lt;/p&gt;

&lt;p&gt;The spamming, trolling and Whac-A-Mole continued for another hour before I closed registration the dinosaur way : ssh&amp;rsquo;ed into the server, edited the code, killed the process running the application and started another process using &lt;code&gt;nohup python manage.py runserver &amp;amp;&lt;/code&gt;. I know, I know, I should never do this, but I guess&amp;hellip;MVP. I&amp;rsquo;ve since switched to running daphne, a worker process and celery using systemd.&lt;/p&gt;

&lt;p&gt;Since it was launch day, there were quite a few users coming in every hour and idling for a few minutes. Unfortunately most of the legitimate users could not signup since I had closed registration. Soon, the normal conversations resumed and we discussed a lot of interesting topics ranging from moderation to 4chan to startups and cryptocurrencies. You can read a part of it &lt;a href=&#34;https://www.hackerschat.net/topics/general/chat/archive/?date=2018-01-02&#34;&gt;here&lt;/a&gt;. I interrupted these conversation periodically to inform the people watching the chat to send me an email if they want to join the conversation. I ended up receiving 7 emails asking for an invite. I&amp;rsquo;m guessing the trolls cost me quite a few missed signups. The chat room has presence, which shows how many users are connected to the chat room. At any given point over the 3 days after launching, there were 15 to 20 people connected to the chat room.&lt;/p&gt;

&lt;p&gt;Registration remained closed and the conversations between users who already had an account continued. On the 6th of January, another spamming incident occured! A troll with the username &amp;ldquo;arnold&amp;rdquo; had an account before I closed registration. When no one was connected to the chat room, he decided to whip out his spamming script and sent over 5000 messages interspersed with messages such as &amp;ldquo;Oh this chat room hasn&amp;rsquo;t crashed&amp;rdquo;, &amp;ldquo;You&amp;rsquo;re still up&amp;rdquo;. Well, 5700 messages over 30 minutes is not even close to a DoS attack. Once I noticed what was happening, I promptly deleted his account along with all the spam messages.&lt;/p&gt;

&lt;p&gt;A few minutes after this incident, I received an email from Google Cloud informing me that my account had been suspended because of billing related issues! Can the day get any better? It would take a few days to get the situation sorted so I switched to Digital Ocean where the card that Google declined was working perfectly. Anyway, I frantically setup a server on Digital Ocean and lost over 500 of the most recent chat messages since it was restored from an older backup. Finally, the site was back up.&lt;/p&gt;

&lt;p&gt;Since I had closed registration and the launch day traffic started it&amp;rsquo;s journey towards the x axis, things became quiet in the chat room. Over the next few days, I implemented some basic anti-spam measures :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;recaptcha on the signup and login forms&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;rate limiting : each user can send a maximum of 10 messages per minute&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;automated deactivation of accounts that use offensive language. Ironically, I used a Google API for this.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I implemented these changes, I reopened registration. On the 19th of January, a spammer noticed this and created an account with a username that had racist terms. He used his automated script to start spamming but ran into the rate limit of 10 messages per minute. Once the rate limit was reset after a minute, he continued spamming racial slurs before his account was automatically banned and I received an email with the subject line &amp;ldquo;User [****] banned&amp;rdquo;. The anti-spam measures worked! I logged in to the chat room to find that he had created another account with the username &amp;ldquo;bee_movie_ama&amp;rdquo;. Since his username had &amp;ldquo;ama&amp;rdquo;, I decided to ask him a few questions. We had an interesting conversation and it turns out that he was also the &amp;ldquo;bee_movie&amp;rdquo; user from launch day and he was also the user &amp;ldquo;arnold&amp;rdquo;. I asked him a few questions about 4chan, trolling and a few other topics. It was an interesting conversation, read it &lt;a href=&#34;https://www.hackerschat.net/topics/general/chat/archive/?date=2018-01-19&#34;&gt;here&lt;/a&gt;. I also asked him about the spamming tools he uses and it turned to be a simple bash script that works as follows : manually create an account on the site and keep it open on the browser, then run xdotool to read from the beemovie script and enter it into the input form. That&amp;rsquo;s it, nothing fancy.&lt;/p&gt;

&lt;p&gt;So what was the point of this blog post? It&amp;rsquo;s mostly an interesting story to me since this is the first time being targeted by spammers. If there&amp;rsquo;s something to be learned from this story, it&amp;rsquo;s that don&amp;rsquo;t build spammable websites! At the very least implement recaptcha and rate limiting for all websites with user generated content such as chat rooms and forums.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, you might want to check out my chat room &lt;a href=&#34;https://www.hackerschat.net/&#34;&gt;Hackers Chat&lt;/a&gt; where we discuss topics related to programming and technology. I&amp;rsquo;m exploring the idea of public chat rooms with this project, and have a lot of plans in the works! Join the chat room and let me know what you think.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a chat room using Django Channels</title>
      <link>https://www.ploggingdev.com/2017/11/building-a-chat-room-using-django-channels/</link>
      <pubDate>Wed, 01 Nov 2017 05:38:38 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/11/building-a-chat-room-using-django-channels/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; : Code is on &lt;a href=&#34;https://github.com/ploggingdev/djangochat&#34;&gt;Github&lt;/a&gt;. In this post I explain how you can build a chat room using &lt;a href=&#34;https://channels.readthedocs.io/en/stable/index.html&#34;&gt;Django Channels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A standard Django application handles &lt;code&gt;http&lt;/code&gt; requests using a request-response lifecycle. A request is sent from the user&amp;rsquo;s browser, Django calls the relevant view which then returns a response to the user. The request-response lifecycle has certain limitations though : it&amp;rsquo;s not great for realtime applications which usually require communicating with the backend server frequently. New standards such as websockets and HTTP2 address some of these shortcomings. WebSockets is a recent communications protocol which provides full-duplex communication channels over a single TCP connection and is well suited for realtime applications. Opening and maintaining a websocket connection with a server is very cheap in terms of memory and cpu resources required. To give you some real world numbers, Chris McCord was able to hold &lt;a href=&#34;http://phoenixframework.org/blog/the-road-to-2-million-websocket-connections&#34;&gt;2 million open websocket connections&lt;/a&gt; on a single server with 40 cores and 128 GB of RAM. Though he used the Phoenix framework as the backend of choice instead of Django channels, the important takeaway is that websockets are extremely lightweight full-duplex communication channels.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Channels extends Django and allows us to handle websocket connections in a way that&amp;rsquo;s very similar to normal views. So, what is a channel? A channel is an ordered, first-in first-out queue with message expiry and at-most-once delivery to only one listener at a time. In simpler terms, a channel is a task queue which accepts messages from producers and delivers them to consumers.&lt;/p&gt;

&lt;p&gt;So how does Channels extend Django? It seperates Django into two processes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;an interface server which handles the incoming HTTP and Websocket connection, eg- Daphne&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;worker process that runs the views to process the websocket and http requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They communicate over a protocol called &lt;a href=&#34;https://channels.readthedocs.io/en/stable/asgi.html&#34;&gt;ASGI&lt;/a&gt; which is routed over Redis. What&amp;rsquo;s interesting is that since the interface server and worker process are decoupled in Channels, it&amp;rsquo;s possible to add and remove worker processes without closing websocket connections.&lt;/p&gt;

&lt;p&gt;The following representation gives you an idea of how Django serves requests the traditional way vs using Channels:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django handling only HTTP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Browser &amp;lt;&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt; Web server &amp;lt;&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt; Django View function&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django with Channels&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Browser &amp;lt;&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt; Interface server &amp;lt;&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt; Channel layer  &amp;lt;&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt; Django View function + Websocket Consumer&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Web server&lt;/em&gt; - handles http connections.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Interface server&lt;/em&gt; - handles http and websocket connections.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Channel layer&lt;/em&gt; - transports http and websocket messages and delivers them to worker processes that run normal Django views as well as Channels specific consumer code.&lt;/p&gt;

&lt;p&gt;Note that this is a simplified representation. In production deployments it&amp;rsquo;s likely to be different. Eg- Daphne is usually not exposed to the outside world directly and instead sits behind an ngnix server. As another example, it&amp;rsquo;s possible to run a WSGI server alongside websocket specific workers to serve normal Django http requests.&lt;/p&gt;

&lt;p&gt;I will be explaining the code that is specific to running a chat room. I won&amp;rsquo;t be covering topics as setting up a Django project from scratch, setting up an auth system etc.&lt;/p&gt;

&lt;p&gt;Channels installation instructions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pip install channels&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add &lt;code&gt;channels&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; setting&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install redis using &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-redis-on-ubuntu-16-04&#34;&gt;this guide&lt;/a&gt; which is for Ubuntu 16.04&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use redis as the channel by following &lt;a href=&#34;https://channels.readthedocs.io/en/latest/backends.html#redis&#34;&gt;this guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The chat room will be minimal :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a single chat room where users can&amp;hellip;chat&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a column to show the logged in users that are currently online as well as the number of onlookers i.e people who are watching the chat but are not logged in&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An often overlooked aspect of chat room demos is that the count of how many users are online is incorrect. To give you an example, check &lt;a href=&#34;http://www.hnchat.com/&#34;&gt;HN Chat&lt;/a&gt; which shows that 68 users are online (as of this writing) even though that&amp;rsquo;s not true. This happens because there are a varienty of events that cause clients to disconnect websocket connections without notifying the server of the same. The server has no easy way of updating the number of users connected to the chat room without a periodic pruning process. A Django package that helps out in this situation is &lt;a href=&#34;https://django-channels-presence.readthedocs.io/en/latest/&#34;&gt;django-channels-presence&lt;/a&gt;. It allows us to prune stale websocket connections and keep an accurate count of the number of users currently connected to the chat room. How does this pruning work? In order to keep track of which websockets are actually still connected, we must regularly update the &lt;code&gt;last_seen&lt;/code&gt; timestamp for all present connections, and periodically remove connections if they haven’t been seen in a while.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s jump in to the code. We are going to have a single hardcoded room called &lt;code&gt;all&lt;/code&gt; so there&amp;rsquo;s no need to create a separate &lt;code&gt;Room&lt;/code&gt; model. So how do we represent the actual chat message that users send? Take a look at the following model :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ChatMessage(models.Model):
    &amp;quot;&amp;quot;&amp;quot;
    Model to represent a chat message
    &amp;quot;&amp;quot;&amp;quot;

    #Fields
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    message = models.TextField(max_length=3000)
    message_html = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        &amp;quot;&amp;quot;&amp;quot;
        String to represent the message
        &amp;quot;&amp;quot;&amp;quot;

        return self.message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fields are straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;user&lt;/code&gt; represents the user object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;message&lt;/code&gt; is the raw text that the user types in to the chat box&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;message_html&lt;/code&gt; is the html rendered version of &lt;code&gt;message&lt;/code&gt;. The html version will be escaped and only link tags will be allowed in the chat room. All other tags such as &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; won&amp;rsquo;t work. The main reason to prerender the html version of each chat message is to save on processing resources by avoiding rendering the same html &lt;em&gt;everytime&lt;/em&gt; a user requests it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s move on to designing the homepage view. This view is the chat room, so we need to retrieve the chat messages from the database and display them using a simple html template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class IndexView(generic.View):

    def get(self, request):
        # We want to show the last 10 messages, ordered most-recent-last
        chat_queryset = ChatMessage.objects.order_by(&amp;quot;-created&amp;quot;)[:10]
        chat_message_count = len(chat_queryset)
        if chat_message_count &amp;gt; 0:
            first_message_id = chat_queryset[len(chat_queryset)-1].id
        else:
            first_message_id = -1
        previous_id = -1
        if first_message_id != -1:
            try:
                previous_id = ChatMessage.objects.filter(pk__lt=first_message_id).order_by(&amp;quot;-pk&amp;quot;)[:1][0].id
            except IndexError:
                previous_id = -1
        chat_messages = reversed(chat_queryset)
        
        return render(request, &amp;quot;chatdemo/chatroom.html&amp;quot;, {
            &#39;chat_messages&#39;: chat_messages,
            &#39;first_message_id&#39; : previous_id,
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The IndexView retrieves the last 10 messages, ordered most-recent-last i.e normal chat oder and sets the following variables :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first_message&lt;/code&gt; - The id of the first message in the chat scrollback. Eg- let&amp;rsquo;s say our database contains the messages with id 4,3,2,1. We send 4,3,2 to be rendered in the chat window. When I hit &amp;ldquo;Load previous messages&amp;rdquo; from the chat room, I want all messages starting from the id that&amp;rsquo;s just before what&amp;rsquo;s currently in the chat room. In this case it will be 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The chat room is rendered using the &lt;a href=&#34;https://github.com/ploggingdev/djangochat/blob/master/chatdemo/templates/chatdemo/chatroom.html&#34;&gt;chatroom.html&lt;/a&gt; template.&lt;/p&gt;

&lt;p&gt;Now that we have a chat room page that displays the ten most recent messages, we can start designing the websocket endpoints that allow users to send a chat message as well as load previous chat messages. The file structure to enable this is simple : we define the routes in &lt;code&gt;routing.py&lt;/code&gt; which is the Channels version of &lt;code&gt;urls.py&lt;/code&gt;, and we define the consumers (views) in &lt;code&gt;consumers.py&lt;/code&gt; which is the Channels version of &lt;code&gt;views.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s define 2 endpoints in &lt;code&gt;routing.py&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/ws/&lt;/code&gt; will be the endpoint to which chat messages will be sent&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/loadhistory/&lt;/code&gt; will be the endpoint which handles the requests for previous chat messages&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each endpoint has 3 events :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;websocket.connect&lt;/code&gt; is called when a new websocket connection is opened&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;websocket.receive&lt;/code&gt; handles the actual message which is either a chat message from the user or a request for chat history in this project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;websocket.disconnect&lt;/code&gt; is called when the client disconnects from the websocket connection&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the code for &lt;code&gt;routing.py&lt;/code&gt; where we define the mentioned websocket endpoints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from channels.routing import route
from channels import include
from chatdemo.consumers import chat_connect, chat_disconnect, chat_receive, loadhistory_connect, loadhistory_disconnect, loadhistory_receive

chat_routing = [
    route(&amp;quot;websocket.connect&amp;quot;, chat_connect),
    route(&amp;quot;websocket.receive&amp;quot;, chat_receive),
    route(&amp;quot;websocket.disconnect&amp;quot;, chat_disconnect)
]

loadhistory_routing = [
    route(&amp;quot;websocket.connect&amp;quot;, loadhistory_connect),
    route(&amp;quot;websocket.receive&amp;quot;, loadhistory_receive),
    route(&amp;quot;websocket.disconnect&amp;quot;, loadhistory_disconnect)
]

channel_routing = [
    include(chat_routing, path=r&amp;quot;^/ws/$&amp;quot;),
    include(loadhistory_routing, path=r&amp;quot;^/loadhistory/$&amp;quot;),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moving on to defining the views that process the websocket requests in the &lt;code&gt;consumers.py&lt;/code&gt; file, we start by understanding how chat messages are handled by Django channels.&lt;/p&gt;

&lt;p&gt;When a user establishes a websocket connection to the &lt;code&gt;/ws/&lt;/code&gt; endpoint, here&amp;rsquo;s what happens :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;reply_channel&lt;/code&gt; of the connection is added to the &lt;code&gt;all&lt;/code&gt; group. Why is this required? All users will be part of the same group which allows us to send chat messages in a one-to-many fashion. Eg- when &lt;em&gt;User A&lt;/em&gt; sends a message, all users connected in the &lt;code&gt;all&lt;/code&gt; group will receive the message.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The connection is also added to the &lt;code&gt;all&lt;/code&gt; room. The &lt;code&gt;Room&lt;/code&gt; here referes to a model in the &lt;code&gt;channels_presence&lt;/code&gt; package. This is used to keep track of the number of users connected to the chat room.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally the following response is sent to the user to confirm that the connection has been accepted : &lt;code&gt;{&amp;quot;accept&amp;quot;: True}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the code that we just discussed :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@channel_session_user_from_http
def chat_connect(message):
    Group(&amp;quot;all&amp;quot;).add(message.reply_channel)
    Room.objects.add(&amp;quot;all&amp;quot;, message.reply_channel.name, message.user)
    message.reply_channel.send({&amp;quot;accept&amp;quot;: True})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s move on to the code that handles the chat messages. Here&amp;rsquo;s the outline of what happens inside the function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Receive and decode the json message&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Confirm that the json contains a &lt;code&gt;message&lt;/code&gt; key which holds the content of the message&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Confirm that the user is authenticated since it does not make sense to accept chat messages from unathenticated users&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Escape the message using the &lt;code&gt;escape&lt;/code&gt; function from &lt;code&gt;django.utils.html&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check if the message contains any valid urls and convert the urls to links. Eg- &lt;code&gt;https://google.com&lt;/code&gt; becomes &lt;code&gt;&amp;lt;a href=&amp;quot;https://google.com&amp;quot;&amp;gt;https://google.com&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally return a json containing the username and html message.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the implementation of the above flow&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@touch_presence
@channel_session_user
def chat_receive(message):
    data = json.loads(message[&#39;text&#39;])
    if not data[&#39;message&#39;]:
        return
    if not message.user.is_authenticated:
        return
    current_message = escape(data[&#39;message&#39;])
    urlRegex = re.compile(
            u&#39;(?isu)(\\b(?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)[^\\s()&amp;lt;&#39;
            u&#39;&amp;gt;\\[\\]]+[^\\s`!()\\[\\]{};:\&#39;&amp;quot;.,&amp;lt;&amp;gt;?\xab\xbb\u201c\u201d\u2018\u2019])&#39;
        )
    
    processed_urls = list()
    for obj in urlRegex.finditer(current_message):
        old_url = obj.group(0)
        if old_url in processed_urls:
            continue
        processed_urls.append(old_url)
        new_url = old_url
        if not old_url.startswith((&#39;http://&#39;, &#39;https://&#39;)):
            new_url = &#39;http://&#39; + new_url
        new_url = &#39;&amp;lt;a href=&amp;quot;&#39; + new_url + &#39;&amp;quot;&amp;gt;&#39; + new_url + &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
        current_message = current_message.replace(old_url, new_url)
    m = ChatMessage(user=message.user, message=data[&#39;message&#39;], message_html=current_message)
    m.save()

    my_dict = {&#39;user&#39; : m.user.username, &#39;message&#39; : current_message}
    Group(&amp;quot;all&amp;quot;).send({&#39;text&#39;: json.dumps(my_dict)})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;@touch_presence&lt;/code&gt; decorator is used to note the periodic beat sent from the users&amp;rsquo; browser which ensures that users are not removed from the list of active users connected to the chat room.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;chat_disconnect&lt;/code&gt; function just removes the user from the &lt;code&gt;all&lt;/code&gt; group &lt;em&gt;and&lt;/em&gt; room.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@channel_session_user
def chat_disconnect(message):
    Group(&amp;quot;all&amp;quot;).discard(message.reply_channel)
    Room.objects.remove(&amp;quot;all&amp;quot;, message.reply_channel.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s look at the function that sends the latest list of users and the count of anonymous users. This function is called everytime a user connects or disconnects from the chat room.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@receiver(presence_changed)
def broadcast_presence(sender, room, **kwargs):
    # Broadcast the new list of present users to the room.
    Group(room.channel_name).send({
        &#39;text&#39;: json.dumps({
            &#39;type&#39;: &#39;presence&#39;,
            &#39;payload&#39;: {
                &#39;channel_name&#39;: room.channel_name,
                &#39;members&#39;: [user.username for user in room.get_users()],
                &#39;lurkers&#39;: int(room.get_anonymous_count()),
            }
        })
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The json data returned is :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;members&lt;/code&gt; : the list of logged in users connected to the chat room&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;lurkers&lt;/code&gt; : an integer count representing how many anonymous users are connected to the chat&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moving on to the second websocket endpoint, &lt;code&gt;/loadhistory/&lt;/code&gt;, the &lt;code&gt;loadhistory_connect(message)&lt;/code&gt; function just accepts the websocket connect by sends the standard response to indicate that the connection has been accepted : &lt;code&gt;{&amp;quot;accept&amp;quot;: True}&lt;/code&gt;. On disonnecting the connection, we don&amp;rsquo;t need to do anything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@channel_session_user_from_http
def loadhistory_connect(message):
    message.reply_channel.send({&amp;quot;accept&amp;quot;: True})

@channel_session_user
def loadhistory_disconnect(message):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, here&amp;rsquo;s how the &lt;code&gt;loadhistory_receive&lt;/code&gt; returns previous messages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It decodes the json and extracts the &lt;code&gt;last_message_id&lt;/code&gt; which represents the chat message id before the last message that has been rendered in the chat room for the current user.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It makes a query to the database to retrieve 10 messages (if they exist) having an id less than or equal to &lt;code&gt;last_message_id&lt;/code&gt; and returns the chat messages in json format.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@channel_session_user
def loadhistory_receive(message):
    data = json.loads(message[&#39;text&#39;])
    chat_queryset = ChatMessage.objects.filter(id__lte=data[&#39;last_message_id&#39;]).order_by(&amp;quot;-created&amp;quot;)[:10]
    chat_message_count = len(chat_queryset)
    if chat_message_count &amp;gt; 0:
        first_message_id = chat_queryset[len(chat_queryset)-1].id
    else:
        first_message_id = -1
    previous_id = -1
    if first_message_id != -1:
        try:
            previous_id = ChatMessage.objects.filter(pk__lt=first_message_id).order_by(&amp;quot;-pk&amp;quot;)[:1][0].id
        except IndexError:
            previous_id = -1

    chat_messages = reversed(chat_queryset)
    cleaned_chat_messages = list()
    for item in chat_messages:
        current_message = item.message_html
        cleaned_item = {&#39;user&#39; : item.user.username, &#39;message&#39; : current_message }
        cleaned_chat_messages.append(cleaned_item)

    my_dict = { &#39;messages&#39; : cleaned_chat_messages, &#39;previous_id&#39; : previous_id }
    message.reply_channel.send({&#39;text&#39;: json.dumps(my_dict)})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have the websocket endpoints, so let&amp;rsquo;s move on to the the client side javascript which calls these endpoints.&lt;/p&gt;

&lt;p&gt;Before I explain the client side javascript that connects to the websocket endpoints, a quick note about the usage of &lt;a href=&#34;https://github.com/joewalnes/reconnecting-websocket&#34;&gt;Reconnecting websockets&lt;/a&gt; : it&amp;rsquo;s a javascript library that automatically reconnects if the connection is dropped and is used because by default, websockets do not automatically reconnect if the connection is closed.&lt;/p&gt;

&lt;p&gt;There are 2 clientside javascript files :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/djangochat/blob/master/chatdemo/static/chatdemo/realtime.js&#34;&gt;realtime.js&lt;/a&gt; handles the chat chat messages&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/djangochat/blob/master/chatdemo/static/chatdemo/loadhistory.js&#34;&gt;loadhistory.js&lt;/a&gt; handles loading the previous chat messages&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll give you a high level overview of what happens inside the &lt;code&gt;realtime.js&lt;/code&gt; file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Establish a &lt;code&gt;ReconnectingWebSocket&lt;/code&gt; connection to the &lt;code&gt;/ws/&lt;/code&gt; endpoint. Like &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt;, websocket connections can be either &lt;code&gt;ws&lt;/code&gt; or &lt;code&gt;wss&lt;/code&gt; i.e unencrypted or encrypted. The code uses &lt;code&gt;wss&lt;/code&gt; if the site is loaded over &lt;code&gt;https&lt;/code&gt;, otherwise it uses the unencrypted &lt;code&gt;ws&lt;/code&gt; mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Send a periodic heartbeat to the &lt;code&gt;/ws&lt;/code&gt; endpoint every 10 seconds to let the server know that the connection is active&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Convert the chat message text that the user submits into json format and send it to the server&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are two types of server responses that this file handles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When the server sends a &lt;code&gt;presence&lt;/code&gt; payload containing an updated list of active users along with a lurkers count. The javascript uses this data to update the users list and lurkers count.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When a new message is posted, the server sends the username of the user who sent the message along with the rendered html. The javascript uses this data to update the user&amp;rsquo;s chat room.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the javascript implementation of what we just discussed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    // When we&#39;re using HTTPS, use WSS too.
    $(&#39;#all_messages&#39;).scrollTop($(&#39;#all_messages&#39;)[0].scrollHeight);
    var to_focus = $(&amp;quot;#message&amp;quot;);
    var ws_scheme = window.location.protocol == &amp;quot;https:&amp;quot; ? &amp;quot;wss&amp;quot; : &amp;quot;ws&amp;quot;;
    var chatsock = new ReconnectingWebSocket(ws_scheme + &#39;://&#39; + window.location.host + &amp;quot;/ws/&amp;quot;);

    chatsock.onmessage = function(message) {

        if($(&amp;quot;#no_messages&amp;quot;).length){
            $(&amp;quot;#no_messages&amp;quot;).remove();
        }

        var data = JSON.parse(message.data);
        if(data.type == &amp;quot;presence&amp;quot;){
            //update lurkers count
            lurkers = data.payload.lurkers;
            lurkers_ele = document.getElementById(&amp;quot;lurkers-count&amp;quot;);
            lurkers_ele.innerText = lurkers;

            //update logged in users list
            user_list = data.payload.members;
            document.getElementById(&amp;quot;loggedin-users-count&amp;quot;).innerText = user_list.length;
            user_list_obj = document.getElementById(&amp;quot;user-list&amp;quot;);
            user_list_obj.innerText = &amp;quot;&amp;quot;;
            
            //alert(user_list);
            for(var i = 0; i &amp;lt; user_list.length; i++ ){
                var user_ele = document.createElement(&#39;li&#39;);
                user_ele.setAttribute(&#39;class&#39;, &#39;list-group-item&#39;);
                user_ele.innerText = user_list[i];
                user_list_obj.append(user_ele);
            }

            return;
        }
        var chat = $(&amp;quot;#chat&amp;quot;)
        var ele = $(&#39;&amp;lt;li class=&amp;quot;list-group-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&#39;)
        
        ele.append(
            &#39;&amp;lt;strong&amp;gt;&#39;+data.user+&#39;&amp;lt;/strong&amp;gt; : &#39;)
        
        ele.append(
            data.message)
        
        chat.append(ele)
        $(&#39;#all_messages&#39;).scrollTop($(&#39;#all_messages&#39;)[0].scrollHeight);
    };

    $(&amp;quot;#chatform&amp;quot;).on(&amp;quot;submit&amp;quot;, function(event) {
        var message = {
            message: $(&#39;#message&#39;).val()
        }
        chatsock.send(JSON.stringify(message));
        $(&amp;quot;#message&amp;quot;).val(&#39;&#39;).focus();
        return false;
    });

    setInterval(function() {
    chatsock.send(JSON.stringify(&amp;quot;heartbeat&amp;quot;));
    }, 10000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second javascript file handles the loading of previous chat messages. It works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the user clicks on the &amp;ldquo;Load old messages&amp;rdquo; button, the javascript sends the &lt;code&gt;last_message_id&lt;/code&gt; variable to the &lt;code&gt;/loadhistory&lt;/code&gt; endpoint.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the server responds with the previous messages, the javascript updates the client side chat room with the historical chat messages. If the server indicates that there are no more messages in the scrollback, the javascript removes the &amp;ldquo;Load old messages&amp;rdquo; button.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the &lt;code&gt;loadhistory.js&lt;/code&gt; code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
    // When we&#39;re using HTTPS, use WSS too.
    var ws_scheme = window.location.protocol == &amp;quot;https:&amp;quot; ? &amp;quot;wss&amp;quot; : &amp;quot;ws&amp;quot;;

    var loadhistorysock = new ReconnectingWebSocket(ws_scheme + &#39;://&#39; + window.location.host + &amp;quot;/loadhistory/&amp;quot;);

    loadhistorysock.onmessage = function(message) {

        var data = JSON.parse(message.data);

        new_messages = data.messages

        last_id = data.previous_id
        
        if(last_id == -1){
            $(&amp;quot;#load_old_messages&amp;quot;).remove();
            $(&amp;quot;#last_message_id&amp;quot;).text(last_id)
            if(new_messages.length == 0){
                return;
            }
        }
        else{
            $(&amp;quot;#last_message_id&amp;quot;).text(last_id)
        }

        var chat = $(&amp;quot;#chat&amp;quot;)

        for(var i=new_messages.length - 1; i&amp;gt;=0; i--){
            var ele = $(&#39;&amp;lt;li class=&amp;quot;list-group-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;&#39;)
            
            ele.append(
                &#39;&amp;lt;strong&amp;gt;&#39;+new_messages[i][&#39;user&#39;]+&#39;&amp;lt;/strong&amp;gt; : &#39;
                )
            
            ele.append(
                new_messages[i][&#39;message&#39;])
            
            chat.prepend(ele)
        }

    };

    $(&amp;quot;#load_old_messages&amp;quot;).on(&amp;quot;click&amp;quot;, function(event) {
        var message = {
            last_message_id: $(&#39;#last_message_id&#39;).text()
        }
        loadhistorysock.send(JSON.stringify(message));
        return false;
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We talked about pruning stale websocket connections earlier, but how do we implement the code? We use a &lt;code&gt;celery&lt;/code&gt; task that runs every 10 seconds and prunes the stale websocket connections.&lt;/p&gt;

&lt;p&gt;The code to prune the websocket connections is very simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def prune():
    from channels_presence.models import Room
    Room.objects.prune_presences()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;django-channels-presence&lt;/code&gt; package makes this task easy. If you want to view the full code in the &lt;code&gt;celery.py&lt;/code&gt; file, link is &lt;a href=&#34;https://github.com/ploggingdev/djangochat/blob/master/chatdemo/celery.py&#34;&gt;here&lt;/a&gt;. If you are not familiar with celery, refer to the official &lt;a href=&#34;http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! We went over the process of building a chat room using Django Channels. You can see the code for this project on &lt;a href=&#34;https://github.com/ploggingdev/djangochat&#34;&gt;Github&lt;/a&gt; which has instructions to setup and run this project on your local machine.&lt;/p&gt;

&lt;p&gt;If you have any questions, comments or suggestions to improve this guide let me know in the comments section below (which I built as a Disqus alternative). You can contact me by email or Twitter and the links to them are in the footer.&lt;/p&gt;

&lt;p&gt;Here is a screenshot of the chat room for future reference. The demo page will be taken down a few days after this post is published.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/django_chat.png&#34; alt=&#34;Chat room demo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://channels.readthedocs.io/en/stable/index.html&#34;&gt;Django Channels docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://django-channels-presence.readthedocs.io/en/latest/&#34;&gt;django-channels-presence docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html&#34;&gt;Celery periodic tasks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django&#34;&gt;Heroku blog post by Jacob Kaplan Moss&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Online accounts need a clearly defined lifecycle</title>
      <link>https://www.ploggingdev.com/2017/10/online-accounts-need-a-clearly-defined-lifecycle/</link>
      <pubDate>Fri, 06 Oct 2017 03:44:39 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/10/online-accounts-need-a-clearly-defined-lifecycle/</guid>
      <description>&lt;p&gt;As part of a thought experiment, I was thinking about the implications of the internet becoming mainstream in a short time frame. One of the points that came up was the lifecycle of online accounts and their associated data. The lack of a clearly defined lifecycle means that users are at the mercy of each services&amp;rsquo; policies. Some services retain data indefinitely, some services sell user data to third parties for ad targeting and most services don&amp;rsquo;t allow deleting accounts. This is one area where the big tech companies seem reasonable : most allow deleting user accounts and the associated data, but it&amp;rsquo;s unclear what data deletion really means. What happens to the user data stored in the database backups? What happens to the data shared with third parties? Are they instructed to delete data once the upstream user deletes his account?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As we move away from tech companies and focus on ones whose core competancy is not tech, things get worse. Many companies collect intimately personal details such as location data, education history, billing address, photos and scanned copies of id proof. This sensitive data is often submitted over http, stored unencrypted on servers with poor access control mechanisms. There have been multiple instances of user data being stored in publicly accessible S3 buckets or databases. I won&amp;rsquo;t name specific companies, but I&amp;rsquo;m sure you can come up with a list of such companies.&lt;/p&gt;

&lt;p&gt;Given a long enough timeframe it&amp;rsquo;s a given that a data breach is going to happen. As a single data point, Yahoo once seemed invincible, look at their sorry state of affairs now. It shows how quickly a company can go from seeming invincible to becoming a joke. Take a look at other sites in the &lt;a href=&#34;https://haveibeenpwned.com/PwnedWebsites&#34;&gt;Have I been Pwned&lt;/a&gt; database which allows you to check if your data was leaked in a breach. If that does not scare you, I don&amp;rsquo;t know what will.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth pointing out that once your data is leaked there is no &amp;ldquo;unleaking&amp;rdquo; the data. The data is out there and any determined bad actor can get their hands on the data if they know where to look. As &lt;a href=&#34;http://idlewords.com/talks/haunted_by_data.htm&#34;&gt;pointed out&lt;/a&gt; by Maciej, data leaks that seem harmless today can come back to haunt you in the future and in ways that are impossible to predict. That&amp;rsquo;s really what makes data breaches truly scary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can companies do to improve the current state of affairs?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Have a clearly defined lifecycle for user accounts and data and make it clear how user data will be used. Current terms and conditions are walls of text followed by &amp;ldquo;I will do whatever I want with your data&amp;rdquo;. As I understand, these vague clauses are put in for legal reasons to protect the company in lawsuits, but such clauses are often abused by companies.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow users to delete their accounts and associated data. I think the term deletion needs to be clarified. Delete all data about the user, including from the backup databases. When I brought up the topic of deleting user data with certain companies, I was told that financial records cannot be deleted for legal reasons. If that&amp;rsquo;s the case, the law needs to change to allow the records to be deleted after verifying that all the transactions associated with a user account were legitimate.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Collect only the minimum information that&amp;rsquo;s required. Random SaaS provider does not need to store my billing address. If you need to collect billing address for &lt;a href=&#34;https://en.wikipedia.org/wiki/Address_Verification_System&#34;&gt;AVS&lt;/a&gt;, collect it, verify that the user is not a fraud and then delete the address. There&amp;rsquo;s no reason to store that data indefinitely.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally, companies need to be held accountable for data breaches and the resulting impact it has on users. Currently, data breaches have no impact on the company that&amp;rsquo;s responsible. CEOs who oversaw data breaches collect their millions and walk away into retirement as if nothing happened. There needs to be accountability for companies to take security seriously, until then not much is going to change.&lt;/p&gt;

&lt;p&gt;To bring about any meaningful changes though, there needs to be Government regulation and guidelines on how user data can be used, how long data can be retained and also guidelines to prevent shady practices such as building &lt;a href=&#34;http://mashable.com/2013/06/26/facebook-shadow-profiles/#jB23aFc6KZq1&#34;&gt;shadow profiles of users&lt;/a&gt;. Unfortunately, privacy issues are almost always an afterthought for Governments around the world. Even massive data breaches such as the Equifax breach are not enough to make Governments take security and privacy seriously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can we do to move in this direction?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you run a business, try and implement the above suggestions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Any chance you get to bring up the topic of account/data lifecycle with companies, do it. Tell them you care about it and ask them to spell out their policies unambigously. From experience, most support staff claim they will forward my concerns to their seniors but I never hear back from them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Talk to friends and family about secuity, privacy and the risks of having personal data leaked on the internet.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these actions won&amp;rsquo;t move the needle much though, but doing something is better than hoping things get better automatically. Even writing a shitty blog post like this helps raise awareness and makes people think.&lt;/p&gt;

&lt;p&gt;If you have any thoughts or suggestions, feel free to share them in the comments section below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a Disqus alternative Part 2 : The launch</title>
      <link>https://www.ploggingdev.com/2017/09/building-a-disqus-alternative-part-2--the-launch/</link>
      <pubDate>Wed, 27 Sep 2017 03:42:39 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/09/building-a-disqus-alternative-part-2--the-launch/</guid>
      <description>&lt;p&gt;I finally launched &lt;a href=&#34;https://www.hostedcomments.com/&#34;&gt;Hosted Comments&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;After 3 weeks of development, I finally have the first version up and running. You can scroll to the bottom of this page and see it in action.&lt;/p&gt;

&lt;p&gt;My initial plan was to blog about the process of building Hosted Comments, but I think I am going to skip the part 1, part 2 style in favour of standalone posts talking about specific challenges of building this software.&lt;/p&gt;

&lt;p&gt;So what’s changed since the last post?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I launched!&lt;/strong&gt; The basic functionality is up : adding a website, embedding a small code snippet to add comments to the website, and the actual commenting itself works pretty well. Adding, editing, deleting and replying to comments works. There is also a reddit style voting system. In terms of feature parity with Disqus, a few important pieces are missing : email alerts for comment related notifications, replying to comments by email, anonymous posting of comments and social login. There are also areas that I plan to significantly improve : the look and feel of the website, the moderation tools and optimizations for improved performance. Since this is just an MVP, I decided to leave out the mentioned features. There is also no payment processing built in and will only be added if I manage to get to a point where manually sending invoices becomes a pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt; I heard a lot of complaints about pricing while talking to potential customers and decided to make the plans more generous. $29/month for 1 million pageviews and $99/month for 5 million pageviews. I believe this is more palatable for potential cutomers. I am also planning to introduce a $10/month tier for 200,000 pageviews. Since a commenting system is not exactly viewed as a critical part of a website, I guess I have to lower the prices significantly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Closed source code&lt;/strong&gt; I’ve kept the code closed source. This is obviously a controversial topic, but weighing out the pros and cons in my specific case, I decided to keep it closed source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sales&lt;/strong&gt; : No sales yet. No surprises here. I am in discussions with potential customers and learned a few interesting use cases of my platform. People want to integrate a commenting system into existing products using an api. Eg- Managing accounts for users of niche blogging software. I did not consider the possibility that people might want to integrate my comments system using an api!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketing activites&lt;/strong&gt; : as of now it’s limited to personal outreach and blogging. I received an interesting suggestion about building a tool to compare performance vs Disqus. It’s something I’ll explore in the future. Paid advertising is also something I&amp;rsquo;m exploring. Since I have no clue about how to run a campaign, I&amp;rsquo;ll have to explore paid channels carefully and be prepared to not make any ROI in the beginning.&lt;/p&gt;

&lt;p&gt;I started using the commenting platform on this site and it works great so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important lessons that I learned&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Talking to users, I learned surprising things from them that I did not consider. Eg- People wanted an API, Single Sign On etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sending cold emails is hard since a majority of them go unanswered and the few responses are &amp;ldquo;no thanks&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I&amp;rsquo;ve been in talks with potential customers and the turn around time is days to weeks.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SaaS expectations : interacting with successful SaaS owners, there&amp;rsquo;s been one truth that I found particularly brutal : building any SaaS to even a few hundred MRR takes atleast 6 months on average and along the way I might just find out that this project has no future. All the stories about some guy reaching $10k MRR with minimal effort are called outliers for a reason.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I am in beta right now I am not yet charging users, feel free to try out the platform and let me know you think.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a Disqus alternative Part 1 : Research</title>
      <link>https://www.ploggingdev.com/2017/08/building-a-disqus-alternative-part-1--research/</link>
      <pubDate>Tue, 29 Aug 2017 03:42:39 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/08/building-a-disqus-alternative-part-1--research/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; : I launched &lt;a href=&#34;https://www.hostedcomments.com/&#34;&gt;Hosted Comments&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with a little back story : I started this blog around 9 months ago and managed to build up traffic to a few hundred hits every day. It might not seem like much, but it was and still is a big deal to me. Readers used to leave comments with suggestions for improvements, questions or just to say that they enjoyed reading a particular post. Comments were powered by Disqus and all was well. One day I received an email notification from Disqus informing me that someone had left a comment on my blog. A pretty routine notification, so I opened the post and scrolled down to the comments section and noticed&amp;hellip;six shady ads with images to accompany them. Without any warning, Disqus enabled ads on my site. Until then I never really bothered with what Disqus was doing in the background, but the ads incident made me curious. I inspected the requests that Disqus was making and it turns out that 100+ http requests, sending tracking data to 10+ external advertisers and 2MB of data transfer was required to display a comments section with 5 comments! That was my breaking point and so I promptly removed Disqus from my blog and deleted my account as well.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I did not spend time looking for an alternative until a week ago. I missed the engagement with readers, so I started searching for an alternative commenting platform. My search for an alternative turned up either ad supported Disqus clones or open source self hosted options which were hard to work with. The search for an alternative also made me realize that people were frustrated with Disqus and didn&amp;rsquo;t want to take the trouble of self hosting and managing an open source alternative. Some were even ready to pay for an alternative. I sense a gap in the market! So I decided to build a Disqus alternative which will be as easy to use as Disqus but without any ads or tracking scripts.&lt;/p&gt;

&lt;p&gt;Great, I decided to build a Disqus alternative with a focus on privacy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are some of the important features in Disqus that I will include in my platform?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Networked login : All users who have an account on my website have the ability to comment on any other site that uses my commenting system.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Email notifications with the ability to reply to a comment directly from your email client.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Analytics and moderation tools.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Spam filters&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User profiles&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Social network login&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What are some of the problems with Disqus that I will address in my commenting system?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Privacy&lt;/em&gt; : Disqus makes 100 odd requests and sends tracking data to 20 odd domains according to this &lt;a href=&#34;http://donw.io/post/github-comments/&#34;&gt;blog post&lt;/a&gt;. The plan is to make my comments system fast by doing what a comments sytem is supposed to do : serve comments.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Bloated&lt;/em&gt; : As a result of sending tracking data to their advertising partners, page requests that could be completed in 2 http request (one for loading the comment script and another request for retrieving all comments), require 100+ http requests and take between 2 and 10 seconds to load. Since I don&amp;rsquo;t intend to serve ads or monetize user data, this problem will not arise.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Ads&lt;/em&gt; : Disqus forces websites on the free plan to display ads, the &amp;ldquo;Mom makes $4000 working from home&amp;rdquo; variety&amp;hellip;and six of those with pictures to accompany them. This was the case when I checked a few months ago, I&amp;rsquo;ve since blocked the domain, so if anything has changed let me know &lt;del&gt;in the comments below&lt;/del&gt;. Since I will charge website owners to use my commenting platform, my business model does not depend on ad revenue.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The user experience&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the flow that I plan to implement:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;User signs up for an account.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adds a domain.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Adds the generated javascript snippet to their website to enable the comments section.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pays $xx/month to subscribe to a plan after the free trial period.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Update : This is something that will change frequently in the initial days, visit &lt;a href=&#34;https://www.hostedcomments.com/&#34;&gt;Hosted Comments&lt;/a&gt; for updated pricing.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$20/month/domain upto 100,000 page views&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;$300/month/domain upto 1,000,000 page views + priority support&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Custom pricing for websites with higher requirements&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;(Technical) questions/challenges&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I recently built a site with a comments section (&lt;a href=&#34;https://github.com/ploggingdev/ploghub&#34;&gt;a blogging platform for developers&lt;/a&gt;) and realized that representing the hierarchical nature of comments, traversing the comments tree and querying whether a user voted on a comment can be extremely expensive in terms of the number of database hits. I came across a neat django package &lt;a href=&#34;http://django-mptt.github.io/django-mptt/&#34;&gt;django-mptt&lt;/a&gt; to represent the hierarchical relationship of comments using a Modified Preorder Traversal Tree. Long story short, most queries can be performed with 2 database queries to gather all the information required to display the comments section.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Loading comments from a third party domain (cross origin) introduces certain challenges. The ways to retrieve data from a domain other than the website itself are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;CORS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTML_element#Frames&#34;&gt;Embedded iframe&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disqus uses sandboxed iframes to display the comments section. This is an area I am still looking into and I am still exploring both the options along with the security implications of choosing one over the other. If you have any thoughts on this topic, let me know either via email or twitter.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Free plan&lt;/em&gt; : this is something that I just can&amp;rsquo;t decide. I am considering providing a heavily limited free plan for websites with low traffic (less than 10,000 page views a month). To clarify, by heavily limited, I mean the number of websites on the free plan will be restricted, but the feature set will not be restricted.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Spam&lt;/em&gt; : For the initial version, the only anti-spam measure will be restricting the number of comments per account in a given timeframe. Eg- 10 comments per hour.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Misc&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Comments will be written in markdown.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No social login options will be available. &lt;strong&gt;Update&lt;/strong&gt; : I will include social media login since it&amp;rsquo;s the most requested feature. I will include a non-tracking version of the social media login buttons.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I already built a comments section with voting in my previous project, the main challenge is going to be to get to feature parity with Disqus and build the tooling to turn this into a SaaS.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have an email list, but if you want to keep up with the developments regarding this project, you can follow me on &lt;a href=&#34;https://twitter.com/ploggingdev&#34;&gt;twitter&lt;/a&gt;. I would love to hear your thoughts on this project either from a technical perspective or as a potential customer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A model for a privacy oriented ad network that profiles content, not users</title>
      <link>https://www.ploggingdev.com/2017/05/a-model-for-a-privacy-oriented-ad-network-that-profiles-content-not-users/</link>
      <pubDate>Mon, 22 May 2017 23:16:24 -0700</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/05/a-model-for-a-privacy-oriented-ad-network-that-profiles-content-not-users/</guid>
      <description>&lt;p&gt;A few days ago I came across a talk by Maciej Ceglowski titled &lt;a href=&#34;https://www.youtube.com/watch?v=rSrLjb3k1II&#34;&gt;Notes from an Emergency&lt;/a&gt;. If you have not watched the talk, stop reading this and go watch it. In the talk, he makes a suggestion that the Government should regulate ads to target content instead of users. There was a &lt;a href=&#34;https://news.ycombinator.com/item?id=14383006&#34;&gt;discussion&lt;/a&gt; about the talk on Hacker News where Maciej said that he feels it&amp;rsquo;s a regulatory argument and not a business argument, in response to a comment that implied ads targeting content will be worse than ads that target users. That got me thinking, are ads that target content worse than ads that target users, looking at it purely from a business perspective? I don&amp;rsquo;t think so, and in fact feel that ads targetting content will be &lt;em&gt;better&lt;/em&gt; from a business perspective. In this post, I propose a model for a privacy oriented ad network that targets content instead of users. This is not a novel proposal and it&amp;rsquo;s likely that people have thought about this over the years.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I will briefly explain why I feel the current model does not have the best interests of the users and maybe even businesses in certain cases. Ad networks thrive by profiling users and letting businesses target users based on age, location, interests, browsing history, shopping history and so on. Looking at how much money the Google and Facebook ad networks bring in, it seems to work very well. What are the potential advantages of targeting content instead of users?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Relevant ads&lt;/strong&gt; : Copying my comment from HN : At it&amp;rsquo;s core this is essentially like sponsorship. Anecdote : I&amp;rsquo;ve always found sponsored content more useful than the ads that ad networks show me and they are also not creepy like traditional ads. Eg- I search for strawberries on google, click through a few links. Separately I visit a tech blog to learn about how to monitor a VPS, guess what shows up on a site about servers and software? Strawberries! It&amp;rsquo;s very creepy and completely out of place.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Improved CTR and engagement&lt;/strong&gt; : Without enough data points to backup these claims, it&amp;rsquo;s somewhat anecdotal, but more relevant ads increase CTR and engagement. People who have or had sponsorships on their websites report that sponsored content is more relevant to their audience and the advertisers report CTRs/signups from sponsorship to be much bigher than traditional ads. Eg- Troy Hunt&amp;rsquo;s blog, IndieHackers.com. Obviously, running ads that target content is not exactly sponsorship, but it&amp;rsquo;s closer to sponsorship than traditional ads.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Privacy&lt;/strong&gt; : Since the proposed ad network focuses on displaying ads based on the content of the page, there is no need to profile users. On a related note, there exist large companies whose only job is to profile users and sell this information to advertisers or ad networks. And these companies use downright illegal means to profile users. The need for such cancerous companies will not exist anymore if ads instead target content. Then the focus will shift to matching ads with content, so companies will need to focus on the ML/DL of &amp;ldquo;profiling content&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Inevitable future&lt;/strong&gt; : With time, people&amp;rsquo;s tolerance for creepy ads that profile users will continue to go down even among people who are not tech savvy. At the same time, companies still want to advertise and get their product in front of as many eyeballs as possible (and they are happy to spend obscene amounts of money to do so). Is there a middle ground somewhere? Yes. Stop profiling users and still display relevant ads by advertising on websites where the product/service is relevant. Allow (savvy) users to completely disable ads for a monthly subscription. The reality is that the internet literally runs on ad money allowing the average internet user to use it without ever paying for any content or services on the internet. Yes, that&amp;rsquo;s how the average user uses the internet, more so in Asia, Africa and South America. People who use the internet for the first just can&amp;rsquo;t spend $1 on an app or a service.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Proposed ad network&lt;/strong&gt; : what are some of the properties or features of the new ad network?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Profile content intead of users.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow people to opt out of ads for a monthly fee.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Companies that want to advertise pick a budget, choose the websites that are part of the ad network and that&amp;rsquo;s it. The websites that have the adsense like code will display the ads. Eg- A hypothetical email marketing company will choose to advertise on blogs about email marketing. The ad is relevant to the users and there is no user tracking involved.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Companies can also advertise on individual pages and if there is interest from multiple advertisers, a bidding process will decide who gets the spot.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Websites that want to display ads will just embed a snippet of code to display ads, just like adsense.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The only tracking will be CPM and CTR to begin with. Users will not be profiled.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Since it&amp;rsquo;s a marketplace like site, for payments I will use Paypal for charging advertisers and also paying out people who make money displaying ads. Minimum ad budget will be $100 and the minimum amount for a payout will also be $100. Why Paypal over Stripe Connect? I will need to register using Stripe Atlas which costs $500 + $300 post incorporation setup charges. I will definitely move to Stripe if this takes off though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The commission rates are not finalised, but 30% seems reasonable. For reference, depending on the type of content, Google takes between 32% and 50%.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;People mentioned that ads that target content instead of users won&amp;rsquo;t work as well as the status quo. My theory is that it will work way better, even if you consider it purely from a business PoV. Of course, the only way to find out is to collect data about ads that target content and compare it to the status quo.&lt;/p&gt;

&lt;p&gt;Any feedback is welcome, you can reach out to me on twitter or email.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>concurrent.futures in Python 3</title>
      <link>https://www.ploggingdev.com/2017/01/concurrent.futures-in-python-3/</link>
      <pubDate>Thu, 12 Jan 2017 03:14:07 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/01/concurrent.futures-in-python-3/</guid>
      <description>&lt;p&gt;The concurrent.futures module provides a common high level interface for asynchronously executing callables using pools of threads or processes.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;concurrent.futures.Executor&lt;/code&gt; is a class to execute function calls asynchronously. The important methods are &lt;code&gt;submit(function, args)&lt;/code&gt;, which calls the specified function passing in the given arguments, and &lt;code&gt;map(function, iterables)&lt;/code&gt; which calls the specified function asynchronously passing in each iterable as an argument for a separate function call. This should not be used directly, but is used through its subclasses &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; and &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s jump into an example. The purpose of the following program is to find the sum of all prime numbers until the given number. There are two functions to demonstrate how to use a pool of threads and how to use a pool of processes. &lt;code&gt;sum_primes_thread(nums)&lt;/code&gt; uses threads and &lt;code&gt;sum_primes_process(nums)&lt;/code&gt; uses processes. Notice that the only difference between the two functions is that one uses &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; while the other uses &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import concurrent.futures
import time

def is_prime(num):
    if num &amp;lt;= 1:
        return False
    elif num &amp;lt;= 3:
        return True
    elif num%2 == 0 or num%3 == 0:
        return False
    i = 5
    while i*i &amp;lt;= num:
        if num%i == 0 or num%(i+2) == 0:
            return False
        i += 6
    return True

def find_sum(num):
    sum_of_primes = 0

    ix = 2

    while ix &amp;lt;= num:
        if is_prime(ix):
            sum_of_primes += ix
        ix += 1

    return sum_of_primes

def sum_primes_thread(nums):
    with concurrent.futures.ThreadPoolExecutor(max_workers = 4) as executor:
        for number, sum_res in zip(nums, executor.map(find_sum, nums)):
            print(&amp;quot;{} : Sum = {}&amp;quot;.format(number, sum_res))

def sum_primes_process(nums):
    with concurrent.futures.ProcessPoolExecutor(max_workers = 4) as executor:
        for number, sum_res in zip(nums, executor.map(find_sum, nums)):
            print(&amp;quot;{} : Sum = {}&amp;quot;.format(number, sum_res))

if __name__ == &#39;__main__&#39;:
    nums = [100000, 200000, 300000]
    start = time.time()
    sum_primes_thread(nums)
    print(&amp;quot;Time taken = {0:.5f}&amp;quot;.format(time.time() - start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output when executing &lt;code&gt;sum_primes_process&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;100000 : Sum = 454396537
200000 : Sum = 1709600813
300000 : Sum = 3709507114
Time taken = 0.71783
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output when executing &lt;code&gt;sum_primes_thread&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;100000 : Sum = 454396537
200000 : Sum = 1709600813
300000 : Sum = 3709507114
Time taken = 1.23388
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a simple example to demonstrate how to use pools of threads and processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Don&amp;rsquo;t use threads for CPU intensive tasks.&lt;/p&gt;

&lt;p&gt;Though the callables themselves are executed asynchronously, the results are printed in the order they were called. The output can be displayed asynchronously also, as I demonstrate in the following example.&lt;/p&gt;

&lt;p&gt;This program just retrieves the titles of web pages.&lt;/p&gt;

&lt;p&gt;The output is displayed as and when a request is completed, so the order of the output usually changes between multiple runs of the program.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;concurrent.futures.as_completed(iterable_of_futures)&lt;/code&gt; method accepts an iterable of &lt;code&gt;Future&lt;/code&gt; objects. The iterable is a dictionary in this program, but other iterables can also be used (eg- list).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import concurrent.futures
import time
import requests
import bs4
import os

def load_url(current_url):
    res = requests.get(current_url)
    res.raise_for_status()

    current_page = bs4.BeautifulSoup(res.text,&amp;quot;html.parser&amp;quot;)
    current_title = current_page.select(&#39;title&#39;)[0].getText()
    return current_title

def process_urls_thread_alt(urls):
    with concurrent.futures.ThreadPoolExecutor(max_workers = 4) as executor:
        future_to_url = {executor.submit(load_url, url): url for url in urls}
        for future in concurrent.futures.as_completed(future_to_url):
            url = future_to_url[future]
            try:
                data = future.result()
            except Exception as exc:
                print(&#39;%r generated an exception: %s&#39; % (url, exc))
            else:
                print(&amp;quot;{} : Url = {}&amp;quot;.format(data, url))


def process_urls_process_alt(urls):
    with concurrent.futures.ProcessPoolExecutor(max_workers = 4) as executor:
        future_to_url = {executor.submit(load_url, url): url for url in urls}
        for future in concurrent.futures.as_completed(future_to_url):
            url = future_to_url[future]
            try:
                data = future.result()
            except Exception as exc:
                print(&#39;%r generated an exception: %s&#39; % (url, exc))
            else:
                print(&amp;quot;{} : Url = {}&amp;quot;.format(data, url))

if __name__ == &#39;__main__&#39;:
    url_list = [&amp;quot;https://www.google.com&amp;quot;, &amp;quot;https://www.ploggingdev.com/2016/11/beginning-python-3/&amp;quot;, &amp;quot;https://www.ploggingdev.com/archive/&amp;quot;, &amp;quot;https://www.ploggingdev.com/2016/11/data-types-in-python-3/&amp;quot;, &amp;quot;https://www.ploggingdev.com/2016/11/strings-in-python-3/&amp;quot;]
    start = time.time()
    process_urls_process_alt(url_list)
    print(&amp;quot;Time taken = {0:.5f}&amp;quot;.format(time.time() - start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output of the program (same when using threads or processes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Google : Url = https://www.google.com
Beginning Python 3 : Url = https://www.ploggingdev.com/2016/11/beginning-python-3/
Archive : Url = https://www.ploggingdev.com/archive/
Strings in Python 3 : Url = https://www.ploggingdev.com/2016/11/strings-in-python-3/
Data types in Python 3 : Url = https://www.ploggingdev.com/2016/11/data-types-in-python-3/
Time taken = 1.82259
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are three exceptions that can occur:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;concurrent.futures.CancelledError&lt;/code&gt; is raised when a future is cancelled&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;exception concurrent.futures.TimeoutError&lt;/code&gt; is raised when a future operation exceeds the given timeout&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;concurrent.futures.process.BrokenProcessPool&lt;/code&gt; is raised when one of the workers of a ProcessPoolExecutor has terminated in a non-clean fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above program they are handled in a catch all &lt;code&gt;except Exception&lt;/code&gt; block, but this can be modified depending on the requirements.&lt;/p&gt;

&lt;p&gt;Code for todays blog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/concurrent_futures.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reference : &lt;a href=&#34;https://docs.python.org/3/library/concurrent.futures.html&#34;&gt;Official library reference&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multiprocessing and multithreading in Python 3</title>
      <link>https://www.ploggingdev.com/2017/01/multiprocessing-and-multithreading-in-python-3/</link>
      <pubDate>Mon, 09 Jan 2017 23:03:51 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/01/multiprocessing-and-multithreading-in-python-3/</guid>
      <description>&lt;p&gt;To begin with, let us clear up some terminlogy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Concurrency is when two or more tasks can start, run, and complete in overlapping time periods. It doesn&amp;rsquo;t necessarily mean they&amp;rsquo;ll ever both be running at the same instant. Eg. multitasking on a single-core machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parallelism is when two or more tasks are executed simultaneously.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A thread is a sequence of instructions within a process. It can be thought of as a lightweight process. Threads share the same memory space.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A process is an instance of a program running in a computer which can contain one or more threads. A process has its independent memory space.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;threading&lt;/code&gt; module is used for working with threads in Python.&lt;/p&gt;

&lt;p&gt;The CPython implementation has a Global Interpreter Lock (GIL) which allows only one thread to be active in the interpreter at once. This means that threads cannot be used for parallel execution of Python code. While parallel CPU computation is not possible, parallel IO operations are possible using threads. This is because performing IO operations releases the GIL. To learn more about the GIL refer &lt;a href=&#34;http://www.dabeaz.com/python/UnderstandingGIL.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;What are threads used for in Python?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In GUI applications to keep the UI thread responsive&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;IO tasks (network IO or filesystem IO)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Threads should not be used for CPU bound tasks. Using threads for CPU bound tasks will actually result in worse performance compared to using a single thread.&lt;/p&gt;

&lt;p&gt;The following example demonstrates the use of threads for filesystem IO.&lt;/p&gt;

&lt;p&gt;A queue is used to store the files that need to be processed. A dictionary is used to store the input and output file names. The &lt;code&gt;process_queue()&lt;/code&gt; function is used to retrieve items from the queue and perform the copy operation. The copy operation is done in the &lt;code&gt;copy_op&lt;/code&gt; function using the &lt;code&gt;shutil&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import threading
from queue import Queue
import time
import shutil

print_lock = threading.Lock()

def copy_op(file_data):
    with print_lock:
        print(&amp;quot;Starting thread : {}&amp;quot;.format(threading.current_thread().name))

    mydata = threading.local()
    mydata.ip, mydata.op = next(iter(file_data.items()))

    shutil.copy(mydata.ip, mydata.op)

    with print_lock:
        print(&amp;quot;Finished thread : {}&amp;quot;.format(threading.current_thread().name))

def process_queue():
    while True:
        file_data = compress_queue.get()
        copy_op(file_data)
        compress_queue.task_done()

compress_queue = Queue()

output_names = [{&#39;v1.mp4&#39; : &#39;v11.mp4&#39;},{&#39;v2.mp4&#39; : &#39;v22.mp4&#39;}]

for i in range(2):
    t = threading.Thread(target=process_queue)
    t.daemon = True
    t.start()

start = time.time()

for file_data in output_names:
    compress_queue.put(file_data)

compress_queue.join()

print(&amp;quot;Execution time = {0:.5f}&amp;quot;.format(time.time() - start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note : The v1.mp4 and v2.mp4 were 250MB each.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7 to 10 seconds&lt;/strong&gt; was the time taken when using one thread&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.5 to 5.5 seconds&lt;/strong&gt; was the time taken when using two threads&lt;/p&gt;

&lt;p&gt;So it&amp;rsquo;s clear that threads can be used for parallel filesystem IO.&lt;/p&gt;

&lt;p&gt;The following example demonstrates the use of threads for network IO using the &lt;code&gt;requests&lt;/code&gt; library. This is a toy example use case of threads for networking IO.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import threading
from queue import Queue
import requests
import bs4
import time

print_lock = threading.Lock()

def get_url(current_url):

    with print_lock:
        print(&amp;quot;\nStarting thread {}&amp;quot;.format(threading.current_thread().name))
    res = requests.get(current_url)
    res.raise_for_status()

    current_page = bs4.BeautifulSoup(res.text,&amp;quot;html.parser&amp;quot;)
    current_title = current_page.select(&#39;title&#39;)[0].getText()

    with print_lock:
        print(&amp;quot;{}\n&amp;quot;.format(threading.current_thread().name))
        print(&amp;quot;{}\n&amp;quot;.format(current_url))
        print(&amp;quot;{}\n&amp;quot;.format(current_title))
        print(&amp;quot;\nFinished fetching : {}&amp;quot;.format(current_url))

def process_queue():
    while True:
        current_url = url_queue.get()
        get_url(current_url)
        url_queue.task_done()

url_queue = Queue()

url_list = [&amp;quot;https://www.google.com&amp;quot;]*5

for i in range(5):
    t = threading.Thread(target=process_queue)
    t.daemon = True
    t.start()

start = time.time()

for current_url in url_list:
    url_queue.put(current_url)

url_queue.join()

print(threading.enumerate())

print(&amp;quot;Execution time = {0:.5f}&amp;quot;.format(time.time() - start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single thread : &lt;strong&gt;4 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Two threads : &lt;strong&gt;3 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Five threads : &lt;strong&gt;2 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In network IO, most of the time is spent waiting for the response from the URL, so this is another use case where using threads improves performance.&lt;/p&gt;

&lt;p&gt;Let me demonstrate why it&amp;rsquo;s a bad idea to use threads for CPU bound tasks. In the following program a queue holds numbers. The task is to find the sum of prime number less than or equal to the given number. This is clearly a CPU bound task.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import threading
from queue import Queue
import time

list_lock = threading.Lock()

def find_rand(num):
    sum_of_primes = 0

    ix = 2

    while ix &amp;lt;= num:
        if is_prime(ix):
            sum_of_primes += ix
        ix += 1

    sum_primes_list.append(sum_of_primes)

def is_prime(num):
    if num &amp;lt;= 1:
        return False
    elif num &amp;lt;= 3:
        return True
    elif num%2 == 0 or num%3 == 0:
        return False
    i = 5
    while i*i &amp;lt;= num:
        if num%i == 0 or num%(i+2) == 0:
            return False
        i += 6
    return True

def process_queue():
    while True:
        rand_num = min_nums.get()
        find_rand(rand_num)
        min_nums.task_done()

min_nums = Queue()

rand_list = [1000000, 2000000, 3000000]
sum_primes_list = list()

for i in range(2):
    t = threading.Thread(target=process_queue)
    t.daemon = True
    t.start()

start = time.time()

for rand_num in rand_list:
    min_nums.put(rand_num)

min_nums.join()

end_time = time.time()

sum_primes_list.sort()
print(sum_primes_list)

print(&amp;quot;Execution time = {0:.5f}&amp;quot;.format(end_time - start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single thread : &lt;strong&gt;25.5 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Two threads : &lt;strong&gt;28 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The results are very clear : don&amp;rsquo;t use threads to improve performance of CPU bound tasks. You will always end up with worse performance.&lt;/p&gt;

&lt;p&gt;For parallel execution of tasks, the &lt;code&gt;multiprocessing&lt;/code&gt; module can be used.&lt;/p&gt;

&lt;p&gt;In the following example we take the same task used above and process the inputs in parallel using the &lt;code&gt;multiprocessing&lt;/code&gt; module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from multiprocessing import Pool
import time

def sum_prime(num):
    
    sum_of_primes = 0

    ix = 2

    while ix &amp;lt;= num:
        if is_prime(ix):
            sum_of_primes += ix
        ix += 1

    return sum_of_primes

def is_prime(num):
    if num &amp;lt;= 1:
        return False
    elif num &amp;lt;= 3:
        return True
    elif num%2 == 0 or num%3 == 0:
        return False
    i = 5
    while i*i &amp;lt;= num:
        if num%i == 0 or num%(i+2) == 0:
            return False
        i += 6
    return True

if __name__ == &#39;__main__&#39;:
    start = time.time()
    with Pool(1) as p:
        print(p.map(sum_prime, [1000000, 2000000, 3000000]))
    print(&amp;quot;Time taken = {0:.5f}&amp;quot;.format(time.time() - start))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a single process : &lt;strong&gt;27 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using two processes : &lt;strong&gt;19 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using three processes : &lt;strong&gt;18 seconds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We see a huge improvement from using a single process to using two processes. But the jump from two processes to three processes is minimal. The reason behind this is my hardware. I have a dual core (laptop) CPU with hyperthreading (the OS detects it as four CPUs due to hyperthreading). On a side note, I knew Intel&amp;rsquo;s hyperthreading was not a replacement for more cores. The above example is a noob verification.&lt;/p&gt;

&lt;p&gt;So using the &lt;code&gt;multiprocessing&lt;/code&gt; module results in the full utilization of the CPU.&lt;/p&gt;

&lt;p&gt;Inter process communication can be achieved using queues or pipes. The &lt;code&gt;Queue&lt;/code&gt; in the &lt;code&gt;multiprocessing&lt;/code&gt; module works similar to the &lt;code&gt;queue&lt;/code&gt; module used to demonstrate how the &lt;code&gt;threading&lt;/code&gt; module works so I won&amp;rsquo;t cover it again.&lt;/p&gt;

&lt;p&gt;Another useful communication mechanism between processes is a pipe. A pipe is a duplex (two way) communication channel. Note : Reading or writing to the same end of the pipe simultaneously can result in data corruption.&lt;/p&gt;

&lt;p&gt;The following is a basic example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import multiprocessing as mp
import os

def info(conn):
    conn.send(&amp;quot;Hello from {}\nppid = {}\npid={}&amp;quot;.format(mp.current_process().name, os.getppid(), os.getpid()))
    conn.close()

if __name__ == &#39;__main__&#39;:

    parent_conn, child_conn = mp.Pipe()
    p = mp.Process(target=info, args=(child_conn,))
    p.daemon = True
    p.start()
    print(parent_conn.recv())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Hello from Process-1
ppid = 18621
pid=18622
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/tree/master/multiprocess_demo&#34;&gt;Multiprocessing demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/tree/master/multithread_demo&#34;&gt;Multithreading demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/threading.html&#34;&gt;threading docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/multiprocessing.html&#34;&gt;multiprocessing docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/queue.html&#34;&gt;queue docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference&#34;&gt;Stackoverflow question on Concurrency vs Parallelism&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.dabeaz.com/python/UnderstandingGIL.pdf&#34;&gt;Understanding the GIL&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Analyzing programming language statistics of 100,000 Github repositories</title>
      <link>https://www.ploggingdev.com/2016/12/analyzing-programming-language-statistics-of-100000-github-repositories/</link>
      <pubDate>Sun, 25 Dec 2016 23:03:21 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/analyzing-programming-language-statistics-of-100000-github-repositories/</guid>
      <description>&lt;p&gt;The first step is to gather data about 100,000 repositories using the Github api. I used &lt;code&gt;scrapy&lt;/code&gt; for this.&lt;/p&gt;

&lt;p&gt;A high level overview of how I did this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start from the id of my &lt;code&gt;scrape_github&lt;/code&gt; repo &lt;code&gt;https://api.github.com/repositories?since=76761293&amp;amp;access_token=MY_TOKEN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save only the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;languages_url&lt;/code&gt; for each repo. The &lt;code&gt;languages_url&lt;/code&gt; is the api endpoint which contains the programming language statistics of the current repo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract the link to the next page from the &lt;code&gt;Link&lt;/code&gt; header and follow it repeating the above steps.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each api call returns a list of 100 repositories, so to retrieve data about 100,000 repositories, 1000 api calls are required.&lt;/p&gt;

&lt;p&gt;All the output is saved to a file called &lt;code&gt;all_repos.jsonl&lt;/code&gt; which came to around 13MB.&lt;/p&gt;

&lt;p&gt;The next step is to follow the &lt;code&gt;languages_url&lt;/code&gt; api endpoint for each repository and save the data.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A high level overview of how I did this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Read a line from &lt;code&gt;all_repos.jsonl&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Retrieve data from the &lt;code&gt;languages_url&lt;/code&gt; endpoint&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If an exception occurred, output an empty json object to &lt;code&gt;lang_data.jsonl&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Otherwise save the response to &lt;code&gt;lang_data.jsonl&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check headers to see if api limit has been reached&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If api limit is reached, sleep until the api limit is reset&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Otherwise go to step 1 and repeat until all lines have been read&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There were a few HTTPError exceptions (returned HTTP 403 and 404 status codes) since Github blocked a few repositories for violating their Terms of Service. Around 3 such exceptions in the first 5000 repositories. There were also a lot of empty repositories.&lt;/p&gt;

&lt;p&gt;The api limit for Github is 5000 calls per hour. The headers include &lt;code&gt;X-RateLimit-Remaining&lt;/code&gt; which specifies how many api calls are remaining in the current hour. The &lt;code&gt;X-RateLimit-Reset&lt;/code&gt; header contains a number which specifies when the ratelimit will be reset. It is respresented as the seconds since the Unix epoch. These headers are used to check if the api limit has been reached and how much time to sleep for, if the limit has been reached.&lt;/p&gt;

&lt;p&gt;The total number of api calls made in this step is 100,000 which took a little over 20 hours to complete. I ran this in a VPS.&lt;/p&gt;

&lt;p&gt;Interesting to note that it takes around 5 minutes to make the 5000 api calls on the VPS. So the script is sleeping for the remaining 55+ minutes per hour. I took a screenshot of the bandwidth usage of the VPS the script was running on and it was nice to see a spike every hour (script is calling the Github api) and then go back to zero usage (script is sleeping) until the next spike. Here is the screenshot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/clockwork_code.png&#34; alt=&#34;Bandwidth usage over 24 hours&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once all the relevant data was retrieved, the next step was to plot some graphs. Note that a single repository can include code using multiple programming languages.&lt;/p&gt;

&lt;p&gt;I was interested in the following data:&lt;/p&gt;

&lt;p&gt;Size of code vs programming language:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/size_vs_lang.png&#34; alt=&#34;Size of code vs programming language&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Repos appeared in vs programming language:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/repos_vs_lang.png&#34; alt=&#34;Repos appeared in vs programming language:&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Megabytes/repo vs programming language:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/mb_per_repo_vs_lang.png&#34; alt=&#34;Megabytes/repo vs programming language:&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Take this data with a pinch of salt as it only represents the repositories created approximately over a 2 day perioid. Initially I planned to consider all repos created in 2016, but the sheer scale of Github made me rethink my plans. Extrapolating the number of repos created over 2 days to the the entire year, the number comes to around 18 million repos created in 2016. Besides, the point of the project was to learn a little about &lt;code&gt;scrapy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/ploggingdev/scrape_github&#34;&gt;code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The installation instructions are on the readme file.&lt;/p&gt;

&lt;p&gt;The repo also includes the data I gathered from the github api:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/scrape_github/blob/master/lang_data.jsonl&#34;&gt;lang_data.jsonl (3MB)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/scrape_github/blob/master/github_scraper/all_repos.jsonl&#34;&gt;all_repos.jsonl (13MB)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Scraping my website using requests and BeautifulSoup</title>
      <link>https://www.ploggingdev.com/2016/12/scraping-my-website-using-requests-and-beautifulsoup/</link>
      <pubDate>Thu, 08 Dec 2016 04:48:07 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/scraping-my-website-using-requests-and-beautifulsoup/</guid>
      <description>&lt;p&gt;Ok, I didn&amp;rsquo;t use Scrapy because I am yet to go through it&amp;rsquo;s documentation. I will explore Scrapy in an upcoming blog post.&lt;/p&gt;

&lt;p&gt;Before getting to write code to scrape my website, I will cover the basics of the following modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;webbrowser&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;webbrowser&lt;/code&gt; module is a builtin module in Python . There is not a lot to explore in this module, except the &lt;code&gt;open(url)&lt;/code&gt; method. All it does is open the the default browser to a specified URL.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import webbrowser

urls = [&amp;quot;https://automatetheboringstuff.com/&amp;quot;, &amp;quot;https://automatetheboringstuff.com/chapter11/&amp;quot;]

for link in urls:
   webbrowser.open(link)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The above code opens the links in the default browser. It should be noted that running the above code when no browser is open will cause an error message in Firefox. The message is something like &amp;ldquo;Firefox is already running&amp;rdquo;. This happens because the &lt;code&gt;webbrowser&lt;/code&gt; module detects that there is no browser open, and tries to open a new window for both links. Why both links? Probably because the second &lt;code&gt;webbrowser.open(url)&lt;/code&gt; method is called before the first call causes Firefox to start. How can this be avoided? A hacky solution is to use &lt;code&gt;time.sleep(n seconds)&lt;/code&gt; only after the first call to &lt;code&gt;webbrowser.open()&lt;/code&gt;. Another way is to just keep a Firefox window open, so all calls to &lt;code&gt;webbrowser.open()&lt;/code&gt; will open the link in a new tab. There are probably more elegant ways around this problem, let me know if you aware of any.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;requests&lt;/code&gt; library lets us make HTTP requests without worrying about network errors, connection problems, and data compression. It can make &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; requests among others.&lt;/p&gt;

&lt;p&gt;In the following example, &lt;code&gt;requests&lt;/code&gt; is used to get the homepage of this website and print some basic information about the response. The html response is saved to &lt;code&gt;mysite.html&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests

res = requests.get(&#39;https://www.ploggingdev.com&#39;)
res.raise_for_status()

#print(res.text)
print(&amp;quot;{} bytes&amp;quot;.format(len(res.text)))
print(&amp;quot;HTTP status code: {}&amp;quot;.format(res.status_code))
print(&amp;quot;response object type: {}&amp;quot;.format(type(res)))

mysite = open(&amp;quot;mysite.html&amp;quot;, &amp;quot;wb&amp;quot;)

print(&amp;quot;Writing the response content to mysite.html&amp;quot;)

for chunk in res.iter_content(10000):
    mysite.write(chunk)

mysite.close()

print(&amp;quot;Done writing&amp;quot;)

#output
11681 bytes
HTTP status code: 200
response object type: &amp;lt;class &#39;requests.models.Response&#39;&amp;gt;
Writing the response content to mysite.html
Done writing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some points to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;res.raise_for_status()&lt;/code&gt; is used to raise an exception if an error occurs while downloading&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When writing the response html to a file, the file is opened in &lt;code&gt;wb&lt;/code&gt; mode to maintain the Unicode encoding of the text.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;res.iter_content(bytes)&lt;/code&gt; returns the specified number of bytes of the response content. This is useful when working with large responses.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don&amp;rsquo;t already know about Unicode and character sets, read this &lt;a href=&#34;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the html content of a webpage has been retrieved, we need a library to parse the html. This is where &lt;code&gt;BeautifulSoup&lt;/code&gt; comes in.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;BeautifulSoup&lt;/code&gt; object is created by passing in html content. The html content can be in the form of &lt;code&gt;res.text&lt;/code&gt; using the &lt;code&gt;requests&lt;/code&gt; module or can be a text file.&lt;/p&gt;

&lt;p&gt;Briefly, &lt;code&gt;BeautifulSoup&lt;/code&gt; lets us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;find elements in html using the &lt;code&gt;select()&lt;/code&gt; method. The selection can be made using html tags, ids. Additionally attributes can also be specified.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Data associated with an attribute can be retieved.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more about how to use &lt;code&gt;BeautifulSoup&lt;/code&gt; by following the links at the end of this post.&lt;/p&gt;

&lt;p&gt;Coming to webscraping this website, what am I going to scrape? The url, title and keywords associated with every article.&lt;/p&gt;

&lt;p&gt;How will I accomplish this?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hard code the url of the first blog post&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create lists to hold urls, keywords and titles for every article&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside a &lt;code&gt;while True:&lt;/code&gt; loop, record the current blog url&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fetch the content hosted at the current blog url using &lt;code&gt;requests&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &lt;code&gt;BeautifulSoup&lt;/code&gt; to parse the current page and extract the title and keywords for the current page&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Store the title and keywords for the current post&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;try to locate the link that leads to the next post and follow it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if the link to the next page is not found, it means that we have reached the latest blog and it&amp;rsquo;s time to stop scraping.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added keywords to all blog posts recently and this will be an oppurtunity to check if the keywords have made it into all blogs. Why wouldn&amp;rsquo;t the keywords make it into the blogs if I added them? I use Hugo for this site. Sometimes if there is a typo while specifying the keywords (eg- an extra comma) then the &lt;code&gt;&amp;lt;meta name=&amp;quot;keywords&amp;quot;&lt;/code&gt; tag won&amp;rsquo;t be generated.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import bs4

print(&amp;quot;Fetching all blog posts&amp;quot;)

current_url = &#39;https://www.ploggingdev.com/2016/11/hello-world/&#39;

urls = list()
titles = list()
keywords = list()

while True:
    urls.append(current_url)

    res = requests.get(current_url)
    res.raise_for_status()

    current_page = bs4.BeautifulSoup(res.text,&amp;quot;html.parser&amp;quot;)
    
    current_title = current_page.select(&#39;title&#39;)[0].getText()
    titles.append(current_title)

    current_keywords = current_page.select(&#39;meta[name=&amp;quot;keywords&amp;quot;]&#39;)[0].get(&#39;content&#39;)
    keywords.append(current_keywords)

    #url for next blog post
    try:
        current_url = current_page.select(&#39;ul[class=&amp;quot;pager blog-pager&amp;quot;] &amp;gt; li[class=&amp;quot;next&amp;quot;] &amp;gt; a&#39;)[0].get(&#39;href&#39;)
    except IndexError as ie:
        break

#printing all my blog posts with urls. It&#39;s number from 1 to n

zipped = zip(range(1, len(urls)+1), titles, urls, keywords)

for blog_num, blog_title, blog_url, blog_keywords in zipped:
    print(blog_num)
    print(blog_title)
    print(blog_url)
    print(blog_keywords)
    print()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fetching all blog posts
1
Hello World
https://www.ploggingdev.com/2016/11/hello-world/
plogging dev, hello world

2
Beginning Python 3
https://www.ploggingdev.com/2016/11/beginning-python-3/
python 3, Beginning python 3

3
Data types in Python 3
https://www.ploggingdev.com/2016/11/data-types-in-python-3/
python 3, beginning python 3, data types in python 3, datatypes in python 3, boolean in python 3, ints in p
ython 3, floats in python 3

4
Strings in Python 3
https://www.ploggingdev.com/2016/11/strings-in-python-3/
python 3, data types in python 3, datatypes in python 3, strings in python 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t include the complete output here, but the program successfully scraped all the blog posts. You can find the output &lt;a href=&#34;https://gist.github.com/ploggingdev/343a0636e9696eac6799211d4f4385f8&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/webbrowser_demo.py&#34;&gt;Using webbrowser module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/webscraping.py&#34;&gt;Code for requests and BeautifulSoup demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://automatetheboringstuff.com/chapter11/&#34;&gt;automatetheboringstuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.python-requests.org/en/master/&#34;&gt;Requests docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;BeautifulSoup docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&#34;&gt;Unicode by Joel Spolsky&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Decorators in Python 3</title>
      <link>https://www.ploggingdev.com/2016/12/decorators-in-python-3/</link>
      <pubDate>Sun, 04 Dec 2016 22:29:11 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/decorators-in-python-3/</guid>
      <description>&lt;p&gt;A Python decorator is a specific change to the Python syntax that allows us to conveniently alter functions and methods. In simpler words, a decorator takes in a function, adds some functionality and returns it.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def my_decorator(func):
    def inner():
        print(&amp;quot;Decoration before function call&amp;quot;)
        func()
        print(&amp;quot;Decoration after function call&amp;quot;)

    return inner

@my_decorator
def simple_print():
    print(&amp;quot;Hello from simple_print&amp;quot;)

simple_print()
print()

#output
Decoration before function call
Hello from simple_print
Decoration after function call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;my_decorator(func)&lt;/code&gt; is the decorator function. To use a decorator, place &lt;code&gt;@decorator_function_name&lt;/code&gt; before the function definition that you want to decorate.&lt;/p&gt;

&lt;p&gt;Doing the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@my_decorator
def simple_print():
    print(&amp;quot;Hello from simple_print&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to doing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def simple_print():
    print(&amp;quot;Hello from simple_print&amp;quot;)
simple_print = my_decorator(simple_print)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Decorators can also work with functions that accept arguments.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def check_valid_division(func):
    def inner(a,b):
        if b == 0:
            print(&amp;quot;Division by zero is not allowed&amp;quot;)
        else:
            func(a,b)
    
    return inner

@check_valid_division
def divide(a, b):
    print(a/b)

divide(10,5)
divide(10,0)

#output
2.0
Division by zero is not allowed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we decorated the &lt;code&gt;divide(a,b)&lt;/code&gt; function to prevent throwing a &lt;code&gt;ZeroDivisionError&lt;/code&gt; which would have been raised  if it was not decorated.&lt;/p&gt;

&lt;p&gt;It is also possible to chain multiple decorators together.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def print_star(func):
    def inner(val):
        print(&amp;quot;*&amp;quot; * 20)
        func(val)
        print(&amp;quot;*&amp;quot; * 20)
    
    return inner

def print_percent(func):
    def inner(val):
        print(&amp;quot;%&amp;quot; * 20)
        func(val)
        print(&amp;quot;%&amp;quot; * 20)
    
    return inner

@print_star
@print_percent
def fancy_print(val):
    print(val)

fancy_print(&amp;quot;Hello World&amp;quot;)
print()

@print_percent
@print_star
def fancy_print_different(val):
    print(val)

fancy_print_different(&amp;quot;Different decoration&amp;quot;)

#output
********************
%%%%%%%%%%%%%%%%%%%%
Hello World
%%%%%%%%%%%%%%%%%%%%
********************

%%%%%%%%%%%%%%%%%%%%
********************
Different decoration
********************
%%%%%%%%%%%%%%%%%%%%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@print_star
@print_percent
def fancy_print(val):
    print(val)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def fancy_print(val):
    print(val)
fancy_print = print_star(print_percent(fancy_print))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/decorators.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0318/&#34;&gt;PEP 318&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.programiz.com/python-programming/decorator&#34;&gt;Programiz&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Performance measurement in Python 3</title>
      <link>https://www.ploggingdev.com/2016/12/performance-measurement-in-python-3/</link>
      <pubDate>Sat, 03 Dec 2016 21:13:22 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/performance-measurement-in-python-3/</guid>
      <description>&lt;p&gt;Performance measurement is the process of collecting and understanding information regarding the performance of some code.&lt;/p&gt;

&lt;p&gt;In this blog I will cover the basics of the following modules in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;pstats&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;memory_profiler&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I will start with the &lt;code&gt;timeit&lt;/code&gt; module. This module enables us to time small pieces of code.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import timeit

res1 = timeit.timeit(&#39;&#39;&#39;
a = [i for i in range(50000)]
for i in a:
    pass
&#39;&#39;&#39;, number = 100)

res2 = timeit.timeit(&#39;&#39;&#39;
a = (i for i in range(50000))
for i in a:
    pass
&#39;&#39;&#39;, number = 100)

print(res1)

print(res2)

#output
0.26830113399955735
0.3227190840007097
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;timeit.timeit(args)&lt;/code&gt; returns a float which represents the time taken to execute the given code. In the above example, the first argument is the code to be executed and the second argument is the number of times the code should be run. Executing the code multiple times and taking the average gives a more accurate result than running it a single time.&lt;/p&gt;

&lt;p&gt;Interestingly, the above example also demonstrates that list comprehensions are faster than using generator expressions to iterate over a range of values, but the memory consumption is higher which is not profiled in the above example.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cProfile&lt;/code&gt; module provides deterministic profiling of a python program. Calling &lt;code&gt;cProfile.run(func_name, output_file_name)&lt;/code&gt; profiles the given function and writes the output to a specified file.&lt;/p&gt;

&lt;p&gt;The following columns are included in the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ncalls&lt;/code&gt; : for the number of calls&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;tottime&lt;/code&gt; : for the total time spent in the given function (and excluding time made in calls to sub-functions)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;percall&lt;/code&gt; : is the quotient of tottime divided by ncalls&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cumtime&lt;/code&gt; : is the cumulative time spent in this and all subfunctions (from invocation till exit). This figure is accurate even for recursive functions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;percall&lt;/code&gt; : is the quotient of cumtime divided by primitive calls&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;filename:lineno(function)&lt;/code&gt; : provides the respective data of each function&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;pstats.Stats&lt;/code&gt; class is used to read the profiled data and format the results as required.&lt;/p&gt;

&lt;p&gt;The following example profiles &lt;code&gt;to_be_profiled()&lt;/code&gt; and writes the profile data into the file called &lt;code&gt;cprofile_results&lt;/code&gt;. The &lt;code&gt;pstats.Stats&lt;/code&gt; class is then used to format the profile results in commonly used formats (check the comments in the program).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import cProfile
import pstats
import time
import sys

def to_be_profiled():
    my_list1 = [i**2 for i in range(50000)]

    my_list2 = (i**2 for i in range(100000, 150000))

    sum = 0

    print(&amp;quot;my_list1 = {} bytes&amp;quot;.format(sys.getsizeof(my_list1)))
    print(&amp;quot;my_list2 = {} bytes&amp;quot;.format(sys.getsizeof(my_list2)))

    for i in my_list2:
        sum += i
        time.sleep(0.00001)
        my_list1.append(i)
    print(sum)

cProfile.run(&#39;to_be_profiled()&#39;, &#39;cprofile_results&#39;)

p = pstats.Stats(&#39;cprofile_results&#39;)
#sort by standard name
p.strip_dirs().sort_stats(-1).print_stats(10)
#sort by function name
p.sort_stats(&#39;name&#39;).print_stats(10)
#sort by cumulative time in a function
p.sort_stats(&#39;cumulative&#39;).print_stats(10)
#sort by time spent in a function
p.sort_stats(&#39;time&#39;).print_stats(10)

#output
my_list1 = 406496 bytes
my_list2 = 88 bytes
791660416675000
Sat Dec  3 21:23:38 2016    cprofile_results

         150013 function calls in 3.580 seconds

   Ordered by: standard name
   List reduced from 11 to 10 due to restriction &amp;lt;10&amp;gt;

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.002    0.002    3.580    3.580 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
        1    0.117    0.117    3.578    3.578 performance.py:23(to_be_profiled)
        1    0.014    0.014    0.014    0.014 performance.py:24(&amp;lt;listcomp&amp;gt;)
    50001    0.078    0.000    0.078    0.000 performance.py:26(&amp;lt;genexpr&amp;gt;)
        1    0.000    0.000    3.580    3.580 {built-in method builtins.exec}
        3    0.001    0.000    0.001    0.000 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 {built-in method sys.getsizeof}
    50000    3.357    0.000    3.357    0.000 {built-in method time.sleep}
    50000    0.011    0.000    0.011    0.000 {method &#39;append&#39; of &#39;list&#39; objects}
        1    0.000    0.000    0.000    0.000 {method &#39;disable&#39; of &#39;_lsprof.Profiler&#39; objects}


Sat Dec  3 21:23:38 2016    cprofile_results

         150013 function calls in 3.580 seconds

   Ordered by: function name
   List reduced from 11 to 10 due to restriction &amp;lt;10&amp;gt;

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    3.580    3.580 {built-in method builtins.exec}
        3    0.001    0.000    0.001    0.000 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 {built-in method sys.getsizeof}
    50000    3.357    0.000    3.357    0.000 {built-in method time.sleep}
    50001    0.078    0.000    0.078    0.000 performance.py:26(&amp;lt;genexpr&amp;gt;)
        1    0.014    0.014    0.014    0.014 performance.py:24(&amp;lt;listcomp&amp;gt;)
    50000    0.011    0.000    0.011    0.000 {method &#39;append&#39; of &#39;list&#39; objects}
        1    0.000    0.000    0.000    0.000 {method &#39;disable&#39; of &#39;_lsprof.Profiler&#39; objects}
        2    0.000    0.000    0.000    0.000 {method &#39;format&#39; of &#39;str&#39; objects}
        1    0.002    0.002    3.580    3.580 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)

Sat Dec  3 21:23:38 2016    cprofile_results

         150013 function calls in 3.580 seconds

   Ordered by: cumulative time
   List reduced from 11 to 10 due to restriction &amp;lt;10&amp;gt;

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    3.580    3.580 {built-in method builtins.exec}
        1    0.002    0.002    3.580    3.580 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
        1    0.117    0.117    3.578    3.578 performance.py:23(to_be_profiled)
    50000    3.357    0.000    3.357    0.000 {built-in method time.sleep}
    50001    0.078    0.000    0.078    0.000 performance.py:26(&amp;lt;genexpr&amp;gt;)
        1    0.014    0.014    0.014    0.014 performance.py:24(&amp;lt;listcomp&amp;gt;)
    50000    0.011    0.000    0.011    0.000 {method &#39;append&#39; of &#39;list&#39; objects}
        3    0.001    0.000    0.001    0.000 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 {built-in method sys.getsizeof}
        2    0.000    0.000    0.000    0.000 {method &#39;format&#39; of &#39;str&#39; objects}

Sat Dec  3 21:23:38 2016    cprofile_results

         150013 function calls in 3.580 seconds

   Ordered by: internal time
   List reduced from 11 to 10 due to restriction &amp;lt;10&amp;gt;

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    50000    3.357    0.000    3.357    0.000 {built-in method time.sleep}
        1    0.117    0.117    3.578    3.578 performance.py:23(to_be_profiled)
    50001    0.078    0.000    0.078    0.000 performance.py:26(&amp;lt;genexpr&amp;gt;)
        1    0.014    0.014    0.014    0.014 performance.py:24(&amp;lt;listcomp&amp;gt;)
    50000    0.011    0.000    0.011    0.000 {method &#39;append&#39; of &#39;list&#39; objects}
        1    0.002    0.002    3.580    3.580 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
        3    0.001    0.000    0.001    0.000 {built-in method builtins.print}
        1    0.000    0.000    3.580    3.580 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method sys.getsizeof}
        2    0.000    0.000    0.000    0.000 {method &#39;format&#39; of &#39;str&#39; objects}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moving on to the &lt;code&gt;memory_profiler&lt;/code&gt;, the installation procedure is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#install memory_profiler module
pip install memory_profiler

#install psutil

pip install psutil

#install matplotlib
pip install matplotlib

sudo apt-get install python3-matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install &lt;code&gt;matplotlib&lt;/code&gt;, I first tried &lt;code&gt;pip install matplotlib&lt;/code&gt;, but I was still facing issues plotting graphs. Then I tried, &lt;code&gt;sudo apt-get install python-matplotlib&lt;/code&gt; which installed &lt;code&gt;matplotlib&lt;/code&gt; for Python 2. Finally I tried &lt;code&gt;sudo apt-get install python3-matplotlib&lt;/code&gt; and was able to plot graphs. So my installation procedure installed a lot of unnecessay modules and packages.&lt;/p&gt;

&lt;p&gt;To see a line by line memory profile of a function, the &lt;code&gt;memory_profiler&lt;/code&gt; is used. Importing is done using &lt;code&gt;from memory_profiler import profile&lt;/code&gt;. To specify which function needs to be memory profiled, use the &lt;code&gt;@profile&lt;/code&gt; decorator.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sys
import cProfile
from memory_profiler import profile

@profile()
def mem_to_be_profiled():
    
    my_list1 = [i**2 for i in range(50000)]

    my_list2 = (i**2 for i in range(100000, 150000))

    sum = 0

    print(&amp;quot;my_list1 = {} bytes&amp;quot;.format(sys.getsizeof(my_list1)))
    print(&amp;quot;my_list2 = {} bytes&amp;quot;.format(sys.getsizeof(my_list2)))

    for i in my_list2:
        sum += i
        my_list1.append(i)
    print(sum)

mem_to_be_profiled()

#output
my_list1 = 406496 bytes
my_list2 = 88 bytes
791660416675000
Filename: mem.py

Line #    Mem usage    Increment   Line Contents
================================================
     5     30.4 MiB      0.0 MiB   @profile()
     6                             def mem_to_be_profiled():
     7
     8     32.1 MiB      1.7 MiB       my_list1 = [i**2 for i in range(50000)]
     9
    10     34.8 MiB      2.7 MiB       my_list2 = (i**2 for i in range(100000, 150000))
    11
    12     32.1 MiB     -2.7 MiB       sum = 0
    13
    14     32.1 MiB      0.0 MiB       print(&amp;quot;my_list1 = {} bytes&amp;quot;.format(sys.getsizeof(my_list1)))
    15     32.1 MiB      0.0 MiB       print(&amp;quot;my_list2 = {} bytes&amp;quot;.format(sys.getsizeof(my_list2)))
    16
    17     34.8 MiB      2.7 MiB       for i in my_list2:
    18     34.8 MiB      0.0 MiB           sum += i
    19     34.8 MiB      0.0 MiB           my_list1.append(i)
    20     34.8 MiB      0.0 MiB       print(sum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was hoping to demonstrate that list comprehensions use more memory than generator expressions using memory profiling, but for some reason &lt;code&gt;2.7 MB&lt;/code&gt; of memory is allocated during the creation of a generator object and then it&amp;rsquo;s immediately released in the next line. If you know why this happens everytime, let me know in the comments.&lt;/p&gt;

&lt;p&gt;Now comes the interesting part: plotting a graph of memory usage vs time. We will use the &lt;code&gt;mprof&lt;/code&gt; executable for this.&lt;/p&gt;

&lt;p&gt;Run the script and collect memory profile data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mprof run mem.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command stores the result in a file in the current directory.&lt;/p&gt;

&lt;p&gt;Plot a graph of memory usage vs time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mprof plot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command uses the most recently generated memory profile data.&lt;/p&gt;

&lt;p&gt;Output screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.ploggingdev.com/images/mem_profile.png&#34; alt=&#34;Memory profile graph&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next I will cover the &lt;code&gt;line_profiler&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Installation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install line_profiler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the &lt;code&gt;@profile&lt;/code&gt; decorator to specify the function that needs to be profiled.&lt;/p&gt;

&lt;p&gt;Running the script directly using &lt;code&gt;python file.py&lt;/code&gt; throws an error since &lt;code&gt;@profile&lt;/code&gt; is not defined,&lt;/p&gt;

&lt;p&gt;To see the line by line profile of the function, use :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kernprof -l -v line.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are ways to get around this issue and run it as a normal script as well as profiling it using &lt;code&gt;kernprof&lt;/code&gt;. Here is a &lt;a href=&#34;http://stackoverflow.com/questions/18229628/python-profiling-using-line-profiler-clever-way-to-remove-profile-statements&#34;&gt;Stackoverflow answer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sys

@profile
def to_be_profiled():
    
    my_list1 = [i**2 for i in range(50000)]

    my_list2 = (i**2 for i in range(100000, 150000))
    sum = 0
    print(&amp;quot;my_list1 = {} bytes&amp;quot;.format(sys.getsizeof(my_list1)))
    print(&amp;quot;my_list2 = {} bytes&amp;quot;.format(sys.getsizeof(my_list2)))

    for i in my_list2:
        sum += i
        my_list1.append(i)
    print(sum)


to_be_profiled()

#output
my_list1 = 406496 bytes
my_list2 = 88 bytes
791660416675000
Wrote profile results to line.py.lprof
Timer unit: 1e-06 s

Total time: 0.17311 s
File: line.py
Function: to_be_profiled at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                           @profile
     4                                           def to_be_profiled():
     5
     6         1        17575  17575.0     10.2      my_list1 = [i**2 for i in range(50000)]
     7
     8         1            7      7.0      0.0      my_list2 = (i**2 for i in range(100000, 150000))
     9         1            1      1.0      0.0      sum = 0
    10         1           43     43.0      0.0      print(&amp;quot;my_list1 = {} bytes&amp;quot;.format(sys.getsizeof(my_li
st1)))
    11         1           24     24.0      0.0      print(&amp;quot;my_list2 = {} bytes&amp;quot;.format(sys.getsizeof(my_li
st2)))
    12
    13     50001        68438      1.4     39.5      for i in my_list2:
    14     50000        42867      0.9     24.8          sum += i
    15     50000        44122      0.9     25.5          my_list1.append(i)
    16         1           33     33.0      0.0      print(sum)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I only covered the basic usage of the performance measurement modules, to learn more refer to the links below.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/timeit.html#module-timeit&#34;&gt;timeit module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/profile.html&#34;&gt;cProfile and pstats&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/memory_profiler&#34;&gt;memory_profiler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rkern/line_profiler&#34;&gt;line_profiler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/performance.py&#34;&gt;performance.py&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/mem.py&#34;&gt;mem.py&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/line.py&#34;&gt;line.py&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/requirements.txt&#34;&gt;requirements.txt has been updated&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://www.ploggingdev.com/archive/</link>
      <pubDate>Sat, 03 Dec 2016 00:57:13 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/archive/</guid>
      <description>

&lt;p&gt;This page contains links to all posts on this site.&lt;/p&gt;

&lt;h2 id=&#34;hackers-chat&#34;&gt;Hackers Chat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2018/01/the-strange-launch-of-hackers-chat/&#34;&gt;The strange launch of Hackers Chat&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;thought-pieces&#34;&gt;Thought pieces&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/05/a-model-for-a-privacy-oriented-ad-network-that-profiles-content-not-users/&#34;&gt;A model for a privacy oriented ad network that profiles content, not users&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/10/online-accounts-need-a-clearly-defined-lifecycle/&#34;&gt;Online accounts need a clearly defined lifecycle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2018/07/thoughts-on-reddit-and-its-redesign/&#34;&gt;Thoughts on Reddit and it&amp;rsquo;s redesign&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hosted-comments&#34;&gt;Hosted Comments&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/08/building-a-disqus-alternative-part-1--research/&#34;&gt;Building a Disqus alternative Part 1 : Research&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/09/building-a-disqus-alternative-part-2--the-launch/&#34;&gt;Building a Disqus alternative Part 2 : The launch&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/beginning-python-3/&#34;&gt;Beginning Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/data-types-in-python-3/&#34;&gt;Data types in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/strings-in-python-3/&#34;&gt;Strings in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/lists-in-python-3/&#34;&gt;Lists in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/tuples-in-python-3/&#34;&gt;Tuples in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/ranges-in-python-3/&#34;&gt;Ranges in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/sets-in-python-3/&#34;&gt;Sets in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/dictionaries-in-python-3/&#34;&gt;Dictionaries in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/control-flow-tools-in-python-3/&#34;&gt;Control flow tools in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/functions-in-python-3/&#34;&gt;Functions in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/modules-and-packages-in-python-3/&#34;&gt;Modules and packages in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/classes-and-inheritance-in-python-3/&#34;&gt;Classes and inheritance in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/virtual-environments-and-package-management-in-python-3/&#34;&gt;Virtual environments and package management in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/file-io-and-json-in-python-3/&#34;&gt;File IO and JSON in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/errors-and-exceptions-in-python-3/&#34;&gt;Errors and exceptions in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/unit-testing-in-python-3/&#34;&gt;Unit testing in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/floating-point-arithmetic-issues-in-python-3/&#34;&gt;Floating point arithmetic issues in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/n-queens-solver-in-python-3/&#34;&gt;N queens solver in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/12/list-comprehensions-iterators-generators-and-generator-expressions-in-python-3/&#34;&gt;List comprehensions, iterators, generators and generator expressions in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/12/performance-measurement-in-python-3/&#34;&gt;Performance measurement in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/12/decorators-in-python-3/&#34;&gt;Decorators in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/12/scraping-my-website-using-requests-and-beautifulsoup/&#34;&gt;Scraping my website using requests and BeautifulSoup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/12/analyzing-programming-language-statistics-of-100000-github-repositories/&#34;&gt;Analyzing programming language statistics of 100,000 Github repositories&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/01/multiprocessing-and-multithreading-in-python-3/&#34;&gt;Multiprocessing and multithreading in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/01/concurrent.futures-in-python-3/&#34;&gt;concurrent.futures in Python 3&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/hello-world/&#34;&gt;Hello World&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2017/11/building-a-chat-room-using-django-channels/&#34;&gt;Building a chat room using Django Channels&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>List comprehensions, iterators, generators and generator expressions in Python 3</title>
      <link>https://www.ploggingdev.com/2016/12/list-comprehensions-iterators-generators-and-generator-expressions-in-python-3/</link>
      <pubDate>Fri, 02 Dec 2016 20:54:31 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/list-comprehensions-iterators-generators-and-generator-expressions-in-python-3/</guid>
      <description>&lt;p&gt;A list comprehension is a concise way to create lists that would normally require &lt;code&gt;for&lt;/code&gt; loops to build.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list1 = [x**2 for x in range(10)]
print(list1)
#output
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List comprehension to create a list of tuples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list2 = [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
print(list2)
#output
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;List comprehension using an &lt;code&gt;if&lt;/code&gt; condition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list3 = [x for x in range(10) if x%2 != 0]
print(list3)
#output
[1, 3, 5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only odd numbers are printed in the above example.&lt;/p&gt;

&lt;p&gt;Nested list comprehensions allow us to emulate nested &lt;code&gt;for&lt;/code&gt; loops in some way.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;matrix = [
    [1,2,3],
    [4,5,6],
    [7,8,9],
    [10,11,12]
]

transposed = [[row[i] for row in matrix] for i in range(3)]
print(transposed)
#output
[[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The equivalent using nested &lt;code&gt;for&lt;/code&gt; loops would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(3):
    transposed.append([row[i] for row in matrix])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moving on to iterators. Iterators let us iterate over container objects using &lt;code&gt;for&lt;/code&gt; loops. How to create an iterator: create a class which defines &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;__next__()&lt;/code&gt;. &lt;code&gt;__iter__()&lt;/code&gt; returns an object with a &lt;code&gt;__next__()&lt;/code&gt; method. The &lt;code&gt;__next__()&lt;/code&gt; method which is used to retrieve the next object in the container. The &lt;code&gt;__next__()&lt;/code&gt; method will also need to raise a &lt;code&gt;StopIteration&lt;/code&gt; exception when there are no more elements to iterate over.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Squared:
    &amp;quot;&amp;quot;&amp;quot;Square all the numbers&amp;quot;&amp;quot;&amp;quot;

    def __init__(self, data):
        self.data = data
        self.index = 0
    
    def __iter__(self):
        return self

    def __next__(self):
        if self.index == len(self.data):
            raise StopIteration
        val = self.data[self.index] **2
        self.index += 1

        return val

values = Squared([1,2,3,10])

for i in values:
    print(i)

#output
1
4
9
100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generators are a way to create iterators. There is no need to explicitly define the &lt;code&gt;__iter__()&lt;/code&gt; and &lt;code&gt;__next__()&lt;/code&gt; methods, they are created automatically. Generators are functions that use the &lt;code&gt;yield&lt;/code&gt; statement to return data. When &lt;code&gt;__next__()&lt;/code&gt; is called, the function resumes where it left off and remembers the state of the program. The &lt;code&gt;StopIteration&lt;/code&gt; exception is also automatically raised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def double_values(data):
    &amp;quot;&amp;quot;&amp;quot;Doubles all the values&amp;quot;&amp;quot;&amp;quot;
    for val in data:
        yield val*2

for i in double_values([4,5,3]):
    print(i)

#output
8
10
6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generator expressions are a simple but limited way to create generators and used in cases where the return value of the generator expression is used immediately. They have a syntax similar to list comprehensions, but use parantheses instead of brackets.&lt;/p&gt;

&lt;p&gt;Since generator expressions &lt;em&gt;generate&lt;/em&gt; the values on the fly instead of storing all the values in memory like list comprehensions do, they tend to be more memory efficient than the equivalent list comprehension but also tend to be a little slower. This is an important tradeoff to keep in mind.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exp = sum(i for i in range(5))
print(exp)

#output
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/generators.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html#more-on-lists&#34;&gt;List comprehensions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/classes.html#iterators&#34;&gt;Generators, iterators and generator expressions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>N queens solver in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/n-queens-solver-in-python-3/</link>
      <pubDate>Wed, 30 Nov 2016 04:14:07 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/n-queens-solver-in-python-3/</guid>
      <description>&lt;p&gt;What is the N queens problem?&lt;/p&gt;

&lt;p&gt;The N queens problem is the problem of placing N non-attacking queens on an NxN chessboard, for which solutions exist for all natural numbers N with the exception of N=2 and N=3.&lt;/p&gt;

&lt;p&gt;When N=1, the solution is trivial so the program will ask for a value of N such that &lt;code&gt;N &amp;gt;= 4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will solve this problem using backtracking. There are more efficient ways to solve this problem, but I will use backtracking since it&amp;rsquo;s the most intuitive way to arrive at the solution without getting into the mathematics of arriving at efficient solutions. Through solving these problems, I aim to better understand Python.&lt;/p&gt;

&lt;p&gt;What is backtracking?&lt;/p&gt;

&lt;p&gt;Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate &lt;em&gt;c&lt;/em&gt; (&amp;ldquo;backtracks&amp;rdquo;) as soon as it determines that &lt;em&gt;c&lt;/em&gt; cannot possibly be completed to a valid solution.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A high level overview of how to use backtracking to solve the N queens problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;place a queen in the first column and first row&lt;/li&gt;
&lt;li&gt;place a queen in the second column such that it does not attack the queen in the first column&lt;/li&gt;
&lt;li&gt;continue placing non-attacking queens in the remaining columns&lt;/li&gt;
&lt;li&gt;if all N queens have been placed, a solution has been found. Remove the queen in the Nth column, and try incrementing the row of the queen in the (N-1)th column&lt;/li&gt;
&lt;li&gt;if it&amp;rsquo;s a dead end, remove the queen, increment the row of the queen in the previous column&lt;/li&gt;
&lt;li&gt;continue doing this until the queen in the 1st column exhausts all options and is in the row N&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above explanation starts counting at 1, not 0 based counting.&lt;/p&gt;

&lt;p&gt;To see a visualization of backtracking, refer &lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_queens_puzzle#Exercise_in_algorithm_design&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import copy

def take_input():
    &amp;quot;&amp;quot;&amp;quot;Accepts the size of the chess board&amp;quot;&amp;quot;&amp;quot;

    while True:
        try:
            size = int(input(&#39;What is the size of the chessboard? n = \n&#39;))
            if size == 1:
                print(&amp;quot;Trivial solution, choose a board size of atleast 4&amp;quot;)
            if size &amp;lt;= 3:
                print(&amp;quot;Enter a value such that size&amp;gt;=4&amp;quot;)
                continue
            return size
        except ValueError:
            print(&amp;quot;Invalid value entered. Enter again&amp;quot;)

def get_board(size):
    &amp;quot;&amp;quot;&amp;quot;Returns an n by n board&amp;quot;&amp;quot;&amp;quot;
    board = [0]*size
    for ix in range(size):
        board[ix] = [0]*size
    return board

def print_solutions(solutions, size):
    &amp;quot;&amp;quot;&amp;quot;Prints all the solutions in user friendly way&amp;quot;&amp;quot;&amp;quot;
    for sol in solutions:
        for row in sol:
            print(row)
        print()
            
def is_safe(board, row, col, size):
    &amp;quot;&amp;quot;&amp;quot;Check if it&#39;s safe to place a queen at board[x][y]&amp;quot;&amp;quot;&amp;quot;

    #check row on left side
    for iy in range(col):
        if board[row][iy] == 1:
            return False
    
    ix, iy = row, col
    while ix &amp;gt;= 0 and iy &amp;gt;= 0:
        if board[ix][iy] == 1:
            return False
        ix-=1
        iy-=1
    
    jx, jy = row,col
    while jx &amp;lt; size and jy &amp;gt;= 0:
        if board[jx][jy] == 1:
            return False
        jx+=1
        jy-=1
    
    return True

def solve(board, col, size):
    &amp;quot;&amp;quot;&amp;quot;Use backtracking to find all solutions&amp;quot;&amp;quot;&amp;quot;
    #base case
    if col &amp;gt;= size:
        return
    
    for i in range(size):
        if is_safe(board, i, col, size):
            board[i][col] = 1
            if col == size-1:
                add_solution(board)
                board[i][col] = 0
                return
            solve(board, col+1, size)
            #backtrack
            board[i][col] = 0

def add_solution(board):
    &amp;quot;&amp;quot;&amp;quot;Saves the board state to the global variable &#39;solutions&#39;&amp;quot;&amp;quot;&amp;quot;
    global solutions
    saved_board = copy.deepcopy(board)
    solutions.append(saved_board)

size = take_input()

board = get_board(size)

solutions = []

solve(board, 0, size)

print_solutions(solutions, size)

print(&amp;quot;Total solutions = {}&amp;quot;.format(len(solutions)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output of the program when N=4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;What is the size of the chessboard? n = 
4
[0, 0, 1, 0]
[1, 0, 0, 0]
[0, 0, 0, 1]
[0, 1, 0, 0]

[0, 1, 0, 0]
[0, 0, 0, 1]
[1, 0, 0, 0]
[0, 0, 1, 0]

Total solutions = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some important takeaways from coding the solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To make an NxM list use:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;A = [0] * N
for i in range(N):
    A[i] = [0] * M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried, &lt;code&gt;A = [[0] * M] * N&lt;/code&gt; initially, which is wrong. More info &lt;a href=&#34;https://docs.python.org/3/faq/programming.html#how-do-i-create-a-multidimensional-list&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When saving the contents of a multidimensional list, use &lt;code&gt;copy.deepcopy(to_save)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Testing is hard! More so when dealing with complicated outputs from a function. I will update this blog with tests soon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source code available &lt;a href=&#34;https://github.com/ploggingdev/n-queens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;&gt;Eight queens problem on Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Backtracking&#34;&gt;Backtracking on Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Floating point arithmetic issues in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/floating-point-arithmetic-issues-in-python-3/</link>
      <pubDate>Sun, 27 Nov 2016 21:54:01 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/floating-point-arithmetic-issues-in-python-3/</guid>
      <description>&lt;p&gt;By default, numbers having a decimal point are represented as floating point numbers.&lt;/p&gt;

&lt;p&gt;Verification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(type(1.5))
#output
&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Floating point numbers are represented in computer hardware in base 2. Floating point numbers are used to represent decimal (base 10) numbers in the most common use cases. But most decimal fractions cannot be represented exactly as binary fractions.&lt;/p&gt;

&lt;p&gt;To understand this problem, consider the conversion of a decimal fraction to a decimal number: &lt;code&gt;1/3&lt;/code&gt; is equal to &lt;code&gt;0.333...&lt;/code&gt; with repeating 3&amp;rsquo;s. When represented as a decimal number, it will never be equal to &lt;code&gt;1/3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, many decimal numbers cannot be represented accurately in base 2.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&amp;quot;0.1 + 0.2 = {}&amp;quot;.format(0.1+0.2))
#output
0.1 + 0.2 = 0.30000000000000004

print(&amp;quot;0.1 + 0.4 = {}&amp;quot;.format(0.1+0.4))
#output
0.1 + 0.4 = 0.5

print(&amp;quot;1/10 = {}&amp;quot;.format(1/10))
#output
1/10 = 0.1

print(&amp;quot;Is (0.1 + 0.1 + 0.1 == 0.3) ?&amp;quot;)
print(0.1 + 0.1 + 0.1 == 0.3)
#output
Is (0.1 + 0.1 + 0.1 == 0.3) ?
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In the above examples, notice that some decimal numbers can be represented accurately in base 2 while others cannot be represented accurately.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t pretend that I understand the intricate details behind why this happens, so I will link to some resources if you are interested to learn more: &lt;a href=&#34;http://www.lahey.com/float.htm&#34;&gt;The Perils of Floating Point&lt;/a&gt; and &lt;a href=&#34;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&#34;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How can we overcome this issue in Python? Some solutions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;round()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;using the &lt;code&gt;decimal&lt;/code&gt; module&lt;/li&gt;
&lt;li&gt;using the &lt;code&gt;fractions&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me explain each of these solutions a little more:&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;round()&lt;/code&gt;, floating point numbers can be rounded to a specified number of decimal places. If it&amp;rsquo;s used for post rounding a result (round after performing all operations on floats), working with floats will work as expected. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&amp;quot;Is (0.1 + 0.1 + 0.1 == 0.3) ?&amp;quot;)
print(round(0.1 + 0.1 + 0.1, 5) == round(0.3, 5))
#output
Is (0.1 + 0.1 + 0.1 == 0.3) ?
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;round()&lt;/code&gt; function accepts a number as the first parameter and another number to specify the precision after the decimal point as the second parameter. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(round(10.33333, 3))
#output
10.333
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; It has been pointed out to me that using &lt;code&gt;round()&lt;/code&gt; may not be the best solution in certain cases where the rounded number will be used in calculations further in the program. Using &lt;code&gt;round()&lt;/code&gt; in such cases will lead to accuracy issues. An option is to use string formatting to display the required number of digits since this will not round the numbers. Syntax is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;{: .3f}&#39;.format(10.34123))
#output
10.341
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another alternative is to use the &lt;code&gt;decimal&lt;/code&gt; module when dealing with decimal numbers and accuracy is very important. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from decimal import getcontext, Decimal
from math import pi

print(getcontext())

getcontext().prec = 5
print(Decimal(1)/Decimal(3))

getcontext().prec = 30
print(Decimal(pi))

#output
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=
[InvalidOperation, DivisionByZero, Overflow])
0.33333
3.141592653589793115997963468544185161590576171875
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;getcontext()&lt;/code&gt; allows us to specify the precision and the rounding technique to be used, The default rounding technique is &lt;code&gt;ROUND_HALF_EVEN&lt;/code&gt; which rounds to nearest with ties going to nearest even integer.&lt;/p&gt;

&lt;p&gt;To deal directly with fractions, the &lt;code&gt;fractions&lt;/code&gt; module can be used which supports rational number arithmetic. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from fractions import Fraction

num1 = Fraction(2,3)
num2 = Fraction(1,3)

print(&amp;quot;num1 = {} and num2 = {}&amp;quot;.format(num1,num2))

print(num1 + num2)

print(num1 - num2)

print(num1*10)

print(num1/num2)

#output
num1 = 2/3 and num2 = 1/3
1
1/3
20/3
2
&amp;lt;class &#39;fractions.Fraction&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are multiple ways to construct fractions and the details can be found in the official documentation which is linked below.&lt;/p&gt;

&lt;p&gt;Source code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/funny_floats.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/floatingpoint.html&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/functions.html#round&#34;&gt;round() documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/decimal.html#module-decimal&#34;&gt;decimal module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/fractions.html#module-fractions&#34;&gt;fractions module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lahey.com/float.htm&#34;&gt;The Perils of Floating Point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&#34;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Unit testing in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/unit-testing-in-python-3/</link>
      <pubDate>Sun, 27 Nov 2016 01:57:31 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/unit-testing-in-python-3/</guid>
      <description>&lt;p&gt;Unit testing is a method through which the smallest testable units of source code are tested to determine that they behave as expected. The important benefit of writing unit tests is that it enables us to check for any unwanted side effects when we alter the code and correct them.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;unittest&lt;/code&gt; framework is a built-in unit testing framework in Python.&lt;/p&gt;

&lt;p&gt;Some terminology:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test fixture: the preparation needed to perform one or more tests, and any associate cleanup actions&lt;/li&gt;
&lt;li&gt;test case: individual unit of testing which checks for the correct response for a given input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be covering a minimal subset of &lt;code&gt;unittest&lt;/code&gt; that will be enough to understand what unit testing is and how to go about writing test cases. To learn more, refer to the &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import unittest

class Test2(unittest.TestCase):
    
    def test_simple(self):
        self.assertEqual(2+2,4)

if __name__ == &#39;__main__&#39;:
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Run the test using the following command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -m unittest -v test_2.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test_simple (test_2.Test) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the module name is not provided, by default all unit tests in the current project are executed. The &lt;code&gt;-v&lt;/code&gt; argument is used to display verbose output.&lt;/p&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;unittest&lt;/code&gt; module is imported&lt;/li&gt;
&lt;li&gt;Testcases are created by subclassing &lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The function that contains the tests begins with &lt;code&gt;test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The TestCase class provides methods to check for and report failures.&lt;/p&gt;

&lt;p&gt;Some of the methods are listed below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;assertEqual(a,b)&lt;/li&gt;
&lt;li&gt;assertNotEqual(a,b)&lt;/li&gt;
&lt;li&gt;assertTrue(x)&lt;/li&gt;
&lt;li&gt;assertFalse(x)&lt;/li&gt;
&lt;li&gt;assertIs(a,b)&lt;/li&gt;
&lt;li&gt;assertIn(a,b)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another example of writing test cases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import unittest

def division(x,y):
    &amp;quot;&amp;quot;&amp;quot;Return result of division&amp;quot;&amp;quot;&amp;quot;
    try:
        return x/y
    except ZeroDivisionError:
        print(&amp;quot;Division by zero&amp;quot;)

class Testexceptions(unittest.TestCase):

    def test_basic(self):
        self.assertEqual(division(10,5), 2.0)
        self.assertEqual(division(10,-2), -5.0)

    def test_type_exceptions(self):
        with self.assertRaises(TypeError):
            division(10,&#39;a&#39;)
    
    def test_zero_division(self):
        try:
            division(10,0)
        except ZeroDivisionError:
            self.fail(&amp;quot;ZeroDivisionError&amp;quot;)

if __name__ == &#39;__main__&#39;:
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test_basic (t.Testexceptions) ... ok
test_type_exceptions (t.Testexceptions) ... ok
test_zero_division (t.Testexceptions) ... Division by zero
ok

----------------------------------------------------------------------
Ran 3 tests in 0.000s

OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example introduces &lt;code&gt;assertRaises&lt;/code&gt; which is used to verify that an exception is raised. There is no &lt;code&gt;assertNotRaises&lt;/code&gt;, so one way to achieve that is by using &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; as shown in the &lt;code&gt;test_zero_division&lt;/code&gt; method above.&lt;/p&gt;

&lt;p&gt;There are cases where there is a lot of repetitive code shared by tests, such as connecting to databases or fetching data from a URL. To factor out common code, there are a few methods that we can implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setUp()&lt;/code&gt; is called before the execution of every test method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tearDown()&lt;/code&gt; is called after the execution of every test method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setUpClass()&lt;/code&gt; is called before tests in an individual class are run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tearDownClass()&lt;/code&gt; is called after the tests in a class are run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setUpModule()&lt;/code&gt; is called before code in a module is run&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tearDownModule()&lt;/code&gt; is called after all tests are run inside the module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following example demonstrates the order in which the methods are called.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tests.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import unittest

def setUpModule():
    print(&amp;quot;setUpModule() from tests.py&amp;quot;)

def tearDownModule():
    print(&amp;quot;tearDownModule() from tests.py&amp;quot;)

def division(x,y):
    &amp;quot;&amp;quot;&amp;quot;Return result of division&amp;quot;&amp;quot;&amp;quot;
    try:
        return x/y
    except ZeroDivisionError:
        print(&amp;quot;Division by zero&amp;quot;)

class Testexceptions(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print(&amp;quot;setUpClass() from Testexceptions class in tests.py&amp;quot;)
    
    @classmethod
    def tearDownClass(cls):
        print(&amp;quot;tearDownClass() from Testexceptions class in tests.py&amp;quot;)

    def setUp(self):
        print(&amp;quot;setUp() from Testexceptions in tests.py&amp;quot;)
    def tearDown(self):
        print(&amp;quot;tearDown() from Testexceptions in tests.py&amp;quot;)
    
    def test_basic(self):
        self.assertEqual(division(10,5), 2.0)
        self.assertEqual(division(10,-2), -5.0)

    def test_type_exceptions(self):
        with self.assertRaises(TypeError):
            division(10,&#39;a&#39;)
    
    def test_zero_division(self):
        try:
            division(10,0)
        except ZeroDivisionError:
            self.fail(&amp;quot;ZeroDivisionError&amp;quot;)

if __name__ == &#39;__main__&#39;:
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;test_2.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import unittest

def setUpModule():
    print(&amp;quot;setUpModule() from test_2.py&amp;quot;)

def tearDownModule():
    print(&amp;quot;tearDownModule() from test_2.py&amp;quot;)

class Test2(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print(&amp;quot;setUpClass() from Test2 class in test_2.py&amp;quot;)

    
    def setUp(self):
        print(&amp;quot;setUp() from Test2 in test_2.py&amp;quot;)
    
    def test_simple(self):
        self.assertEqual(2+2,4)

    @unittest.skip(&amp;quot;Skipping a test demo&amp;quot;)
    def test_skip(self):
        self.fail(&amp;quot;Never happens&amp;quot;)

    def tearDown(self):
        print(&amp;quot;tearDown() from Test2 in test_2.py&amp;quot;)
    
    @classmethod
    def tearDownClass(cls):
        print(&amp;quot;tearDownClass() from Test2 class in test_2.py&amp;quot;)


if __name__ == &#39;__main__&#39;:
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setUpModule() from test_2.py
setUpClass() from Test2 class in test_2.py
test_simple (test_2.Test2) ... setUp() from Test2 in test_2.py
tearDown() from Test2 in test_2.py
ok
test_skip (test_2.Test2) ... skipped &#39;Skipping a test demo&#39;
tearDownClass() from Test2 class in test_2.py
tearDownModule() from test_2.py
setUpModule() from tests.py
setUpClass() from Testexceptions class in tests.py
test_basic (tests.Testexceptions) ... setUp() from Testexceptions in tests.py
tearDown() from Testexceptions in tests.py
ok
test_type_exceptions (tests.Testexceptions) ... setUp() from Testexceptions in tests.py
tearDown() from Testexceptions in tests.py
ok
test_zero_division (tests.Testexceptions) ... setUp() from Testexceptions in tests.py
Division by zero
tearDown() from Testexceptions in tests.py
ok
tearDownClass() from Testexceptions class in tests.py
tearDownModule() from tests.py

----------------------------------------------------------------------
Ran 5 tests in 0.001s

OK (skipped=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;unittest.skip(msg)&lt;/code&gt; decorator can be used to skip a test. This is useful when a test is known to fail and it needs to be fixed.&lt;/p&gt;

&lt;p&gt;Source code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/tests.py&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/test_2.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Errors and exceptions in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/errors-and-exceptions-in-python-3/</link>
      <pubDate>Thu, 24 Nov 2016 23:42:14 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/errors-and-exceptions-in-python-3/</guid>
      <description>&lt;p&gt;There are two kinds of errors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax errors, where the program contains invalid syntax&lt;/li&gt;
&lt;li&gt;Exceptions, errors that occur during runtime, though the syntax is valid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of built-in exceptions can be found &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Syntax errors can be avoided by writing valid code and exceptions can be handled using &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;. An example of handling an exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def division(num1, num2):
    &amp;quot;&amp;quot;&amp;quot;Return num1/num2&amp;quot;&amp;quot;&amp;quot;
    return num1/num2

try:
    print(division(10,0))
except ZeroDivisionError:
    print(&amp;quot;You can&#39;t divide by zero&amp;quot;)
#output
You can&#39;t divide by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;How &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; statements work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The code inside the &lt;code&gt;try&lt;/code&gt; block is executed&lt;/li&gt;
&lt;li&gt;If no exception occurs, the &lt;code&gt;except&lt;/code&gt; block is skipped&lt;/li&gt;
&lt;li&gt;If an exception occurs, execution of remaining &lt;code&gt;try&lt;/code&gt; block is skipped and the &lt;code&gt;except&lt;/code&gt; block matching the raised exception is executed. If the exception has not been handled, it is passed to an outer &lt;code&gt;try&lt;/code&gt; block. If there is no outer &lt;code&gt;try&lt;/code&gt; block, it is an unhandled exception and execution stops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above example, note that I am not handling the exception inside the &lt;code&gt;division&lt;/code&gt; function. Instead I am handling the exception when the function is called.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;except&lt;/code&gt; clause can handle multiple exceptions using the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;except Exception1, Exception2 :
    #code to handle Exception1 and Exception2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An exception can be raised as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raise ExceptionName(args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The arguments are optional. If an exception class is present, it is instantiated by calling its constructor without arguments.&lt;/p&gt;

&lt;p&gt;A class in an except clause is compatible with an exception if it is the same class or a base class thereof. The following example demonstrates this concept:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Base(Exception):
    &amp;quot;&amp;quot;&amp;quot;Base class&amp;quot;&amp;quot;&amp;quot;
    pass

class Derived(Base):
    &amp;quot;&amp;quot;&amp;quot;Inherits from Base class&amp;quot;&amp;quot;&amp;quot;
    pass

for to_raise in [Base,Derived]:
    try:
        raise to_raise()
    except Derived:
        print(&amp;quot;Derived class&amp;quot;)
    except Base:
        print(&amp;quot;Base class&amp;quot;)

#output
Base class
Derived class

for to_raise in [Base,Derived]:
    try:
        raise to_raise()
    except Base:
        print(&amp;quot;Base class&amp;quot;)
    except Derived:
        print(&amp;quot;Derived class&amp;quot;)

#output
Base class
Base class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to catch wildcard exceptions as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    raise Exception(&amp;quot;An exception occurred&amp;quot;)
except:
    print(&amp;quot;All exceptions are caught here&amp;quot;)
#output
All exceptions are caught here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So every exception that is raised inside the &lt;code&gt;try&lt;/code&gt; block is caught by the wildcard &lt;code&gt;except&lt;/code&gt; by omitting the exception names. This should be avoided since it can hide any real programming errors.&lt;/p&gt;

&lt;p&gt;An optional &lt;code&gt;else&lt;/code&gt; clause is available, which executes the code inside when no exception is raised. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    #some code
except ExceptionName:
    #handle exception
else:
    #executed when exception is not raised inside try
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When an exception is raised, it is possible to have data associated with the exception. This is useful for debugging purposes to understand under what circumstances the exception was raised. The arguments passed while raising an exception depend on the type of exception. The following is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    raise Exception(&#39;arg1&#39;, &#39;arg2&#39;)
except Exception as inst:
    print(type(inst))
    print(inst.args)
    print(inst)

    x,y = inst.args #unpacking arguments
    print(&amp;quot;x = {} y = {}&amp;quot;.format(x,y))
#output
&amp;lt;class &#39;Exception&#39;&amp;gt;
(&#39;arg1&#39;, &#39;arg2&#39;)
(&#39;arg1&#39;, &#39;arg2&#39;)
x = arg1 y = arg2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to have user defined exceptions in Python by creating a new class. The new class has to be derived from The &lt;code&gt;Exception&lt;/code&gt; class either directly or indirectly. Though it is possible for exception classes to do anything a normal class can do, they are usually kept simple by only having a few attributes that contain information about the exception.&lt;/p&gt;

&lt;p&gt;If a module can raise different custom exceptions, it is a good practice to have a base class that inherits from &lt;code&gt;Exception&lt;/code&gt; and other classes that raise exceptions inherit from the base class. The following is a simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Error(Exception):
    &amp;quot;&amp;quot;&amp;quot;Base class for all exceptions in the module&amp;quot;&amp;quot;&amp;quot;
    name = &amp;quot;exceptions.py&amp;quot;

class FirstError(Error):
    &amp;quot;&amp;quot;&amp;quot;Specific exception class inherits from Error&amp;quot;&amp;quot;&amp;quot;
    
    def __init__(self,message):
        self.message = message

try:
    raise FirstError(&amp;quot;First custom exception&amp;quot;)
except FirstError as custom_exception:
    print(&amp;quot;FirstError has been raise with message: &amp;quot;,custom_exception.message, &amp;quot;\ncurrent module: &amp;quot;, custom_exception.name)

#output
FirstError has been raise with message:  First custom exception
current module:  exceptions.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s standard practice to have all exception classes end with Error.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;finally&lt;/code&gt; clause is available which can be used to define clean up actions. It is always executed, whether an exception occurred or not. The following is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def proper_divide(x,y):
    &amp;quot;&amp;quot;&amp;quot;Returns x/y and handles exceptions&amp;quot;&amp;quot;&amp;quot;
    try:
        result = x/y
    except ZeroDivisionError:
        print(&amp;quot;Division by zero handled&amp;quot;)
    else:
        print(&amp;quot;Result is &amp;quot;, result)
    finally:
        print(&amp;quot;This is always executed&amp;quot;)

proper_divide(10,5)
#output
Result is  2.0
This is always executed
proper_divide(10,0)
#output
Division by zero handled
This is always executed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example also shows how to use &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;except&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; together.&lt;/p&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog can be found &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/exceptions.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/errors.html&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&#34;&gt;Built-in exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>File IO and JSON in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/file-io-and-json-in-python-3/</link>
      <pubDate>Tue, 22 Nov 2016 17:20:29 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/file-io-and-json-in-python-3/</guid>
      <description>&lt;p&gt;Before discussing file IO and json, let&amp;rsquo;s talk about accepting input from the user using &lt;code&gt;input()&lt;/code&gt;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name = input(&amp;quot;What&#39;s your name?\n&amp;quot;)
age = int(input(&amp;quot;Age?\n&amp;quot;))
print(&amp;quot;Name : {}  Age : {}&amp;quot;.format(name,age))
#output
What&#39;s your name?
plog
Age?
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading and writing files involves the following three steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the file using &lt;code&gt;open(filename, mode)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read or write from or to the file using &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Close the file using &lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A file can be opened in the following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; for read only. This is the default mode if mode is not specified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; for write only. This mode overwrites any existing content&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r+&lt;/code&gt; for read and write&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; for appending content to a file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def print_file(filename):
    &amp;quot;&amp;quot;&amp;quot;Prints the contents of a file&amp;quot;&amp;quot;&amp;quot;
    f = open(filename)
    print(f.read())
    f.close()

filename = &amp;quot;temp.txt&amp;quot;

#write to a file
temp_file = open(filename,&#39;w&#39;)
temp_file.write(&#39;First line.\nSecond line.\n&#39;)
temp_file.close()

print_file(filename)

#append to file
temp_file = open(&#39;temp.txt&#39;,&#39;a&#39;)
temp_file.write(&#39;Third line&#39;)
temp_file.close()

print_file(filename)
#output
First line.
Second line.

First line.
Second line.
Third line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A context manager lets us open a file with the guarantee that the file will be closed even if an exception is raised. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;with open(&#39;workfile&#39;, &#39;r&#39;) as f:
    read_data = f.read()
print(f.closed)
#output
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some common exceptions to handle when dealing with files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PermissionError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;os&lt;/code&gt; module is used to interact with the operating system.&lt;/p&gt;

&lt;p&gt;The function, &lt;code&gt;os.path.join()&lt;/code&gt; is used to generate a string to represent a path. The generated path is dependent on the OS it is being run on. Eg- Windows uses backslash in paths while *nix OSes use a forward slash.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(os.path.join(&#39;home&#39;,&#39;plog&#39;,&#39;Desktop&#39;))
#output
home/plog/desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;os.getcwd()&lt;/code&gt; is used to retrieve the current working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(os.getcwd())
/home/plog/Desktop/python_learn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;os.chdir(path)&lt;/code&gt; is used to change directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;os.chdir(&#39;modules&#39;)
print(os.getcwd())
/home/plog/Desktop/python_learn/modules
os.chdir(&#39;../&#39;)
print(os.getcwd())
/home/plog/Desktop/python_learn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To specify a path, relative or absolute paths can be used. &lt;code&gt;.&lt;/code&gt; specifies the current directory and &lt;code&gt;..&lt;/code&gt; specifies the parent directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;os.mkdir(name)&lt;/code&gt; is used to create a directory. &lt;code&gt;os.path.exists(path)&lt;/code&gt; is used to check if the path exists to avoid to decide whether to create the directory or not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if not os.path.exists(&#39;./files_demo&#39;):
    os.mkdir(&#39;./files_demo&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;os.path.getsize(path)&lt;/code&gt; is used to find the size of the file in the specified path.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;os.listdir(path)&lt;/code&gt; lists all the folders and subfolders in the path specified.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;os.path.isdir(path)&lt;/code&gt; and &lt;code&gt;os.path.isfile(path)&lt;/code&gt; are used to verify if the specified paths are a directory and a file respectively. It returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(os.path.getsize(&#39;./temp.txt&#39;))
print(os.listdir(&#39;./&#39;))

print(os.path.isdir(&#39;./files_demo&#39;))
print(os.path.isfile(&#39;./temp.txt&#39;))
#output
35
[&#39;.git&#39;, &#39;requirements.txt&#39;, &#39;io.py&#39;, &#39;files_demo&#39;, &#39;strings.py&#39;, &#39;range.py&#39;, &#39;lists.py&#39;, &#39;LICENSE&#39;, &#39;datat
ypes.py&#39;, &#39;tuples.py&#39;, &#39;control_flow.py&#39;, &#39;hello.py&#39;, &#39;sets.py&#39;, &#39;dictionaries.py&#39;, &#39;functions.py&#39;, &#39;.gitig
nore&#39;, &#39;module_demo.py&#39;, &#39;classes.py&#39;, &#39;temp.txt&#39;, &#39;README.md&#39;, &#39;modules&#39;]
True
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;shelve&lt;/code&gt; module is used to save variables to a file and retrieve them. It stores the contents in binary format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shelf = shelve.open(&#39;shelve_test&#39;)
langs = [&#39;python&#39;, &#39;java&#39;, &#39;php&#39;]
shelf[&#39;langs&#39;] = langs
shelf.close()

shelf = shelve.open(&#39;shelve_test&#39;)
print(shelf[&#39;langs&#39;])
shelf.close()
#output
[&#39;python&#39;, &#39;java&#39;, &#39;php&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;shutil&lt;/code&gt; is a module that lets us move, copy, rename and delete files and folders.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#copy to directory
shutil.copy(&#39;./temp.txt&#39;,&#39;./files_demo&#39;)
#copy and entire folder recursively
shutil.copytree(&#39;./modules&#39;,&#39;./modules_backup&#39;)
#move a file
shutil.move(&#39;./temp.txt&#39;,&#39;./files_demo/temp_backup.txt&#39;)

if not os.path.exists(&#39;./files_demo_2&#39;):
    os.mkdir(&#39;./files_demo_2&#39;)

#move a folder
shutil.move(&#39;./files_demo_2&#39;,&#39;files_demo&#39;)
shutil.move(&#39;./shelve_test&#39;,&#39;./files_demo/files_demo_2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deletion of files and folders can be done using the &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;shutil&lt;/code&gt; modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.unlink(path)&lt;/code&gt; deletes a file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.rmdir(path)&lt;/code&gt; deletes an empty folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutil.rmtree(path)&lt;/code&gt; will delete a directory along with all files and subfolders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since deletion of files and folders is a risky operation, the above functions can be replaced by the &lt;code&gt;send2trash&lt;/code&gt; module. The mentioned module moves the files and folders to be deleted into the trash so it gives us the chance to restore files and folders in case something unexpected happens.&lt;/p&gt;

&lt;p&gt;Install the &lt;code&gt;send2trash&lt;/code&gt; module using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install send2trash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to update the &lt;code&gt;requirements.txt&lt;/code&gt; using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following example shows the usage of &lt;code&gt;send2trash&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;send2trash.send2trash(&#39;./files_demo&#39;)
send2trash.send2trash(&#39;./modules_backup&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A commonly used operation is to traverse a folder and all its files and subfolders recursively. This can be accomplished using &lt;code&gt;os.walk(path)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for folderName, subfolders, filenames in os.walk(&#39;./&#39;):
    print(&#39;The current folder is &#39; + folderName)

    for subfolder in subfolders:
        print(&#39;SUBFOLDER OF &#39; + folderName + &#39;: &#39; + subfolder)
    for filename in filenames:
        print(&#39;FILE INSIDE &#39; + folderName + &#39;: &#39;+ filename)

    print(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code prints all the folders, subfolders and files in the current directory. I did not paste the output, since it includes the contents of &lt;code&gt;.git&lt;/code&gt; which will unnecessarily clutter this plog.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;json&lt;/code&gt; module enables us to convert strings to json and vice-versa.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;json_string = &#39;{&amp;quot;first_name&amp;quot;: &amp;quot;Guido&amp;quot;, &amp;quot;last_name&amp;quot;:&amp;quot;Rossum&amp;quot;}&#39;
parsed_json = json.loads(json_string)
print(parsed_json[&#39;first_name&#39;])
print(json.dumps(parsed_json))
#output
Guido
{&amp;quot;last_name&amp;quot;: &amp;quot;Rossum&amp;quot;, &amp;quot;first_name&amp;quot;: &amp;quot;Guido&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;json.load()&lt;/code&gt; and &lt;code&gt;json.dump()&lt;/code&gt; also exist, which accept files instead of strings as arguments.&lt;/p&gt;

&lt;p&gt;The reason &lt;code&gt;shelve&lt;/code&gt; is preferred over serializing and deserializing objects as json is because of performance. Serializing and deserializing json is an expensive operation for custom objects. Json can be used for dictionaries and lists.&lt;/p&gt;

&lt;p&gt;Source code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/io.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/inputoutput.html&#34;&gt;Official docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://automatetheboringstuff.com/chapter8/&#34;&gt;Automate the boring stuff chapter 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://automatetheboringstuff.com/chapter9/&#34;&gt;Automate the boring stuff chapter 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python-guide.org/en/latest/scenarios/json/&#34;&gt;Hitchhiker&amp;rsquo;s guide to python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Virtual environments and package management in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/virtual-environments-and-package-management-in-python-3/</link>
      <pubDate>Mon, 21 Nov 2016 21:46:23 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/virtual-environments-and-package-management-in-python-3/</guid>
      <description>&lt;p&gt;A virtual environment is a directory containing a Python installation and any additional packages. Since a virtual environment is isolated, any changes made will not affect the global installation of Python. It also enables the usage of different versions of the same package in multiple virtual environments.&lt;/p&gt;

&lt;p&gt;To create a virtual environment, the &lt;code&gt;venv&lt;/code&gt; module will be used. The &lt;code&gt;virtualenv&lt;/code&gt; module also can be used, but &lt;code&gt;venv&lt;/code&gt; is the officially recommended solution so that&amp;rsquo;s what I will be using. The current Python 3 documentation recommends the usage of &lt;code&gt;pyvenv&lt;/code&gt;, which is a wrapper around &lt;code&gt;venv&lt;/code&gt;. Since &lt;code&gt;pyvenv&lt;/code&gt; will be deprecated soon, avoid using &lt;code&gt;pyvenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Installation of &lt;code&gt;venv&lt;/code&gt; on Ubuntu 16.04:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt install python3-venv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m venv python_learn_venv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To activate the newly created virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source python_learn_venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The terminal will reflect that a virtual environment has been activated by displaying it&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;To deactivate a virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After activating a virtual environment, packages can be managed using a tool called &lt;code&gt;pip&lt;/code&gt;. The tool lets you install, upgrade, remove and search for packages.&lt;/p&gt;

&lt;p&gt;To search for a package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip search package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install a package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To uninstall a package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip uninstall package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upgrade a package to the latest version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --upgrade package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To view information about a particular package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip show package_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To view the list of packages installed in the current virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip freeze
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pip list&lt;/code&gt; can be used, but &lt;code&gt;pip freeze&lt;/code&gt; is preferred, since the output is in the format that &lt;code&gt;pip install&lt;/code&gt; expects.&lt;/p&gt;

&lt;p&gt;To keep track of the packages installed in your virtual environment, save the contents of &lt;code&gt;pip freeze&lt;/code&gt; to a file called &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;requirements.txt&lt;/code&gt; can be commited to version control.&lt;/p&gt;

&lt;p&gt;To install packages from requirements.txt`:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A note about &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;pip3&lt;/code&gt;: when a virtual environment has been created with Python 3 and is active, &lt;code&gt;pip&lt;/code&gt; refers to &lt;code&gt;pip3&lt;/code&gt;. When a virtual environment is not activated, &lt;code&gt;pip&lt;/code&gt; will refer to &lt;code&gt;pip2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example of &lt;code&gt;requirements.txt&lt;/code&gt; is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/requirements.txt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/venv.html&#34;&gt;Official docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/1039369/how-to-create-a-python3-virtual-environment-as-of-2016&#34;&gt;Superuser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/learnpython/comments/4hsudz/pyvenv_vs_virtualenv/&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Classes and inheritance in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/classes-and-inheritance-in-python-3/</link>
      <pubDate>Sat, 19 Nov 2016 07:38:24 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/classes-and-inheritance-in-python-3/</guid>
      <description>&lt;p&gt;From Wikipedia: In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods).&lt;/p&gt;

&lt;p&gt;Features of classes in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple inheritance permitted&lt;/li&gt;
&lt;li&gt;Derived class can override base class methods&lt;/li&gt;
&lt;li&gt;Base class methods can be called using &lt;code&gt;super().method_name()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Class members are dynamic, can be modified at runtime&lt;/li&gt;
&lt;li&gt;Class members are public, methods are virtual (can be overridden)&lt;/li&gt;
&lt;li&gt;The first parameter in a method is a reference to the calling object, usually &lt;code&gt;self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Operator overloading is supported&lt;/li&gt;
&lt;li&gt;Aliasing of objects is supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Classes are defined as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ClassName:
    &amp;quot;&amp;quot;&amp;quot;Docstring&amp;quot;&amp;quot;&amp;quot;
    statement_1
    .
    .
    .
    statement_n

#create an instance of the class
var = ClassName()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Class variables are common to all instances and are often used to represent immutable data. An example is the &lt;code&gt;details&lt;/code&gt; variable in the below example.&lt;/p&gt;

&lt;p&gt;An instance variable is unique to every instance of the class ie object. Examples are &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; variables in the following class.&lt;/p&gt;

&lt;p&gt;To initialize an object, the &lt;code&gt;__init__(self)&lt;/code&gt; method is used. It&amp;rsquo;s like a constructor, thinking in terms of Java.&lt;/p&gt;

&lt;p&gt;To specify how the contents of an object should be printed, the &lt;code&gt;__str__(self)&lt;/code&gt; method is used. When an object is printed using &lt;code&gt;print(object_variable)&lt;/code&gt;, the &lt;code&gt;__str__(self)&lt;/code&gt; method is called.&lt;/p&gt;

&lt;p&gt;To format strings the &lt;code&gt;string.format()&lt;/code&gt; will be used. The &lt;a href=&#34;https://docs.python.org/3/library/string.html#formatstrings&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Difference between a function and a method: a function is a named grouping of statements while a method is a function that is associated with a specific class.&lt;/p&gt;

&lt;p&gt;To define a method, it has to be defined inside a class and is called using &lt;code&gt;object.method()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Functions are of two types: pure and modifiers. Pure functions don&amp;rsquo;t modify the data it receives and is the model followed in functional programming. Modifier functions, as the name suggests, modify the data it receives. The cool thing about Python is that it allows different programming paradigms such as functional programming and object oriented programming, and you are free to use whichever programming paradigm suits you.&lt;/p&gt;

&lt;p&gt;Operator overloading is possible in Python by overriding certain methods. Eg- override &lt;code&gt;__add__()&lt;/code&gt; to allow using the &lt;code&gt;+&lt;/code&gt; operator on instances of the class. To learn more refer &lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Objects can be copied using &lt;code&gt;copy.copy()&lt;/code&gt;. A new object is created with the same contents as the original object.&lt;/p&gt;

&lt;p&gt;All these concepts are demonstrated in the following example.&lt;/p&gt;

&lt;p&gt;Point class example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import copy

class Point:
    &amp;quot;&amp;quot;&amp;quot;A class to represent a point&amp;quot;&amp;quot;&amp;quot;

    details = &amp;quot;Represent points&amp;quot;

    def __init__(self,x=0,y=0):
        self.x=x
        self.y=y
    
    def __str__(self):
        return &amp;quot;x={} y={}&amp;quot;.format(self.x,self.y)

    def get_sum(self):
        &amp;quot;&amp;quot;&amp;quot;Return sum of x and y components&amp;quot;&amp;quot;&amp;quot;
        return self.x + self.y
    
    def add_point(self,to_add):
        &amp;quot;&amp;quot;&amp;quot;Update self by add x and y component of new_point&amp;quot;&amp;quot;&amp;quot;
        self.x += to_add.x
        self.y += to_add.y

    def __add__(self,new_point):
        self.x += new_point.x
        self.y += new_point.y
        return self

def print_point(point):
    &amp;quot;&amp;quot;&amp;quot;print contents of given point&amp;quot;&amp;quot;&amp;quot;
    print(&amp;quot;x={} y={}&amp;quot;.format(point.x,point.y))

point = Point(10,20)
print(point)

print(point.details)
print(point.get_sum())

new_point = Point(2,4)
print(new_point)

point.add_point(new_point)
print(point)

print_point(new_point)

copied_point = copy.copy(point)
copied_point.x = 5
copied_point.y = 5
print(point)
print(copied_point)

print(copied_point + new_point)
#output
x=10 y=20
Represent points
30
x=2 y=4
x=12 y=24
x=2 y=4
x=12 y=24
x=5 y=5
x=7 y=9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A note about namespaces and scopes: a namespace is a mapping of names to objects. Eg- global namespace, module namespace, function namespace. A scope is a textual region where the namespace is accessible.&lt;/p&gt;

&lt;p&gt;During execution, there are at least three nested scopes whose namespaces are directly accessible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Innermost scope, an &lt;code&gt;if&lt;/code&gt; block or a loop&lt;/li&gt;
&lt;li&gt;Enclosing function scope&lt;/li&gt;
&lt;li&gt;Module scope&lt;/li&gt;
&lt;li&gt;Global scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Variables can be declared as &lt;code&gt;nonlocal&lt;/code&gt; or &lt;code&gt;global&lt;/code&gt;. If they are not specified, he defualt is the current scope (need to check). A &lt;code&gt;nonlocal&lt;/code&gt; statement is used to indicate a variable has to be rebound in the enclosing scope. A &lt;code&gt;global&lt;/code&gt; statement indicates that a variable has to be rebound in the global scope. Note that this is applicable only for rebinding variables, not for modifying mutable data types. To learn more refer &lt;a href=&#34;https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inheritance is supported. Syntax is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class BaseClass:
    &amp;quot;&amp;quot;&amp;quot;Docstring&amp;quot;&amp;quot;&amp;quot;
    statement_1
    .
    .
    .
    statement_n

class DerivedClass(BaseClass):
    &amp;quot;&amp;quot;&amp;quot;Docstring&amp;quot;&amp;quot;&amp;quot;
    statement_1
    .
    .
    .
    statement_n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple inheritance is supprted using &lt;code&gt;class Derived(Base1,Base2):&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should be noted that multiple inheritance can introduce a situation where multiple base classes inherit from the same base class. To learn more about how method resolution works refer &lt;a href=&#34;https://docs.python.org/3/tutorial/classes.html#multiple-inheritance&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple example of inheritance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Vehicle(object):
    &amp;quot;&amp;quot;&amp;quot;Represents a vehicle&amp;quot;&amp;quot;&amp;quot;

    def __init__(self,engine_power=100):
        self.engine_power = engine_power
    
    def __str__(self):
        return &amp;quot;Engine power : {}HP&amp;quot;.format(self.engine_power)
    
    def print_name(self):
        print(&amp;quot;From vehicle&amp;quot;)
    
class Car(Vehicle):
    &amp;quot;&amp;quot;&amp;quot;Represents a car&amp;quot;&amp;quot;&amp;quot;

    def __init__(self,wheels=4):
        super().__init__()
        self.wheels = wheels
    
    def __str__(self):
        return &amp;quot;Engine power : {}HP , Wheels = {}&amp;quot;.format(self.engine_power,self.wheels)
    
    def print_name(self):
        print(&amp;quot;From vehicle&amp;quot;)

car = Car()
print(car)
car.print_name()
#output
Engine power : 100HP , Wheels = 4
From vehicle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/classes.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/classes.html&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Class_(computer_programming)&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/string.html#formatstrings&#34;&gt;String formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Modules and packages in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/modules-and-packages-in-python-3/</link>
      <pubDate>Wed, 16 Nov 2016 14:13:24 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/modules-and-packages-in-python-3/</guid>
      <description>&lt;p&gt;A module is a file that contains Python definitions and statements with a &lt;code&gt;.py&lt;/code&gt; extension. So technically,
all the code that I posted so far has been in the form of modules. Modules are a way to organize code
in Python so that closely related functions and definitions are grouped together into a module.
It makes code reusable.&lt;/p&gt;

&lt;p&gt;A related concept is packages. Packages are just a way to organize modules into a namespace. A package
can be thought of as a directory that contains modules and subpackages. For Python to treat a directory as
a package, a file named &lt;code&gt;__init__.py&lt;/code&gt; is required in the directory. The &lt;code&gt;__init__.py&lt;/code&gt; can also contain
code that will be executed when the package is first imported, typically initialization code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The following example clarifies these concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A file named &lt;code&gt;module_demo.py&lt;/code&gt; is created.&lt;/li&gt;
&lt;li&gt;A directory named &lt;code&gt;modules&lt;/code&gt; is created.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;modules&lt;/code&gt; directory contains an empty &lt;code&gt;__init__.py&lt;/code&gt; to signify that it is a package.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;modules&lt;/code&gt; package, a &lt;code&gt;useless_print.py&lt;/code&gt; file is created, which is a module.&lt;/li&gt;
&lt;li&gt;To demonstrate submodules, a &lt;code&gt;submodule&lt;/code&gt; directory is created inside &lt;code&gt;modules&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;submodule&lt;/code&gt;, an &lt;code&gt;__init__.py&lt;/code&gt; file is created to signify that it is a package.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;submodule&lt;/code&gt;, a module named &lt;code&gt;another_print.py&lt;/code&gt; is created.&lt;/li&gt;
&lt;li&gt;The functions &lt;code&gt;useless_print&lt;/code&gt; and &lt;code&gt;another_print&lt;/code&gt; from the modules by the same name are imported
into &lt;code&gt;module_demo.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The imported functions are invoked from &lt;code&gt;module_demo.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;text
some more text
some more text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By adding&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    import sys
    #pass sys.argv to relevant function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a module can be used as a script and a module. Executing the module with &lt;code&gt;python module.py arguments&lt;/code&gt; , the code in the module will be executed, just as if you imported it, but with the &lt;code&gt;__name__&lt;/code&gt; set to &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The source code can be found in the &lt;a href=&#34;https://github.com/ploggingdev/python_learn&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few notes about modules and packages in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be explicit: import only what is required.&lt;/li&gt;
&lt;li&gt;Avoid &lt;code&gt;from modules import *&lt;/code&gt;. It clutters the namespace and can result in namespace clashes.&lt;/li&gt;
&lt;li&gt;Avoiding nesting modules as far as possible, prefer a flat structure. For the purpose of demonstration,
I nested a module two levels deep.&lt;/li&gt;
&lt;li&gt;Intra package references &lt;a href=&#34;https://docs.python.org/3/tutorial/modules.html#intra-package-references&#34;&gt;info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/modules.html&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Functions in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/functions-in-python-3/</link>
      <pubDate>Sun, 13 Nov 2016 10:30:06 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/functions-in-python-3/</guid>
      <description>&lt;p&gt;A function is a named sequence of statements. Since a function is named, it is reusable. A simple function
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def hello_function():
    &#39;&#39;&#39;This is where the function documentation goes&#39;&#39;&#39;
    print(&#39;Hello from function&#39;)

hello_function()
print(hello_function)
#output
Hello from function
&amp;lt;function hello_function at 0x7f34bc7db378&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;def&lt;/code&gt; keyword is used to define a function.&lt;/li&gt;
&lt;li&gt;It is followed by the function name, argument list(if any), and a
colon &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The function body is indented by 4 spaces.&lt;/li&gt;
&lt;li&gt;The first line of a function body is a
&lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html#tut-docstrings&#34;&gt;docstring&lt;/a&gt;,
which is documentation for the function. It&amp;rsquo;s a good practice to always include the docstring.&lt;/li&gt;
&lt;li&gt;The statements that constitute the function are placed after the docstring.&lt;/li&gt;
&lt;li&gt;A function is an object, notice the output of &lt;code&gt;print(hello_function)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A function can return a value after it finishes execution. If a return value is not specified, the
default value is &lt;code&gt;None&lt;/code&gt;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def function_with_return():
    &#39;&#39;&#39;This function returns a number&#39;&#39;&#39;
    return 42
return_value = function_with_return()
print(return_value)
#output
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;return&lt;/code&gt; keyword is used to return a variable or value.&lt;/p&gt;

&lt;p&gt;A function can accept arguments. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def function_args(arg1):
    &#39;&#39;&#39;Prints the argument it recieves&#39;&#39;&#39;
    print(arg1)
function_args(&#39;My argument&#39;)
#output
My argument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to have default arguments. When an argument is not provided, a default value is used.
Example :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def function_default_args(arg1=42):
    &#39;&#39;&#39;A function with a default argument&#39;&#39;&#39;
    print(arg1)
function_default_args(34)
function_default_args()
#output
34
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keyword arguments are specified by explicitly stating which argument a value belongs to. Very poor
explanation, let the code speak:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def function_kwargs(name=&#39;no name&#39;, age=42):
    &#39;&#39;&#39;Keyword arguments demo&#39;&#39;&#39;
    print(name, &#39; &#39;, age)
function_kwargs(age=34,name=&#39;my name&#39;)
function_kwargs(name=&#39;my name&#39;,age=34)
#output
my name   34
my name   34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible to mix keyword and positional arguments. Keyword arguments should always come after
positional arguments. The
&lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments&#34;&gt;official ducumentation&lt;/a&gt; explains
this concept well.&lt;/p&gt;

&lt;p&gt;Arbitrary argument lists are those whose content length can vary. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def function_variable_args(*args):
    &#39;&#39;&#39;This function prints a variable number of arguments&#39;&#39;&#39;
    print(&#39; &#39;.join(*args))
variable_args1 = &#39;python&#39;, &#39;ruby&#39;, &#39;php&#39;
function_variable_args(variable_args1)
variable_args2 = &#39;python&#39;, &#39;ruby&#39;, &#39;php&#39;, &#39;java&#39;
function_variable_args(variable_args2)
#output
python ruby php
python ruby php java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t understand arbitrary argument lists well. The same result can be achieved by using a normal tuple
without the &lt;code&gt;*args&lt;/code&gt;. I&amp;rsquo;ll come back to this later.&lt;/p&gt;

&lt;p&gt;The official documentation also contains tl;dr about the coding style in Python. Link
&lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html#intermezzo-coding-style&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To understand how arguments are passed to functions and how arguments being mutable or immutable
affects the values in the outer scope, refer
&lt;a href=&#34;http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/functions.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html#defining-functions&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Control flow tools in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/control-flow-tools-in-python-3/</link>
      <pubDate>Sat, 12 Nov 2016 11:28:34 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/control-flow-tools-in-python-3/</guid>
      <description>&lt;p&gt;Before I start with control flow tools, here are a few definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; Basic units of data. Eg- &lt;code&gt;10&lt;/code&gt;,&lt;code&gt;&#39;string&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable:&lt;/strong&gt; A name that refers to a value. Eg- &lt;code&gt;var=10&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt; is the variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Statement:&lt;/strong&gt; A section of code that represents a command or action.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operator:&lt;/strong&gt; A symbol that performs operations on operands. Eg- &lt;code&gt;*&lt;/code&gt; is for multiplication&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expression&lt;/strong&gt; A combination of variables, operators, and values to perform a task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn about operators in Python refer
&lt;a href=&#34;https://www.tutorialspoint.com/python3/python_basic_operators.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the control flow tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt; statements are used for conditional decision making. Executution starts from &lt;code&gt;if&lt;/code&gt; then &lt;code&gt;elif&lt;/code&gt; and
finally &lt;code&gt;else&lt;/code&gt; statements. The first condition that matches (evaluates to &lt;code&gt;True&lt;/code&gt;) is executed and the
remaining conditions are skipped. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;num=42
if num&amp;gt;0:
    print(&#39;postive number&#39;)
elif num==0:
    print(&#39;Zero&#39;)
else:
    print(&#39;negative number&#39;)
#output
postive number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; statement is used for iteration. It consists of a condition, which evaluates to either &lt;code&gt;True&lt;/code&gt;
or &lt;code&gt;False&lt;/code&gt;. The code inside the &lt;code&gt;while&lt;/code&gt; loop is executed as long as the condition evaluates to &lt;code&gt;True&lt;/code&gt;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;while example&#39;)
counter=10
while counter&amp;gt;0:
    print(counter)
    counter-=1
print(&#39;Blast off&#39;)
#output
while example
10
9
8
7
6
5
4
3
2
1
Blast off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop is used to iterate over the items of any sequence such as lists, strings. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;for example 1&#39;)
values=[11,12,34,46]
for i in values:
    print(i)

print(&#39;for example 2&#39;)
for i in range(6):
    print(i)
#output
for example 1
11
12
34
46
for example 2
0
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;continue&lt;/code&gt; statement is used to skip the current iteration of either a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loop. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;continue example&#39;)
for i in range(10):
    if(i%2==0):
        continue
    print(i)
#output
continue example
1
3
5
7
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, even numbers are not printed.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;break&lt;/code&gt; statement is used to stop the execution of the loop that it is encountered in. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;break example&#39;)
for i in range(10):
    if(i==6):
        break
    print(i)
#output
break example
0
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;code&gt;6&lt;/code&gt; is encountered, execution of the &lt;code&gt;for&lt;/code&gt; loop is stopped. Note that in the case of nested &lt;code&gt;for&lt;/code&gt;
loops, only the execution of the loop that &lt;code&gt;break&lt;/code&gt; is encountered in is stopped, but not the loops at a
higher level.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pass&lt;/code&gt; statement does not do anything. It is generally used in situations where code is expected to
be present, but there is nothing meaningful that can be placed. The following example demonstrates the
usage of &lt;code&gt;pass&lt;/code&gt;, though it is not a good example of where to use &lt;code&gt;pass&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;pass example&#39;)
for i in range(10):
    pass
    print(i)
    pass
#output
pass example
0
1
2
3
4
5
6
7
8
9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/python3/python_basic_operators.htm&#34;&gt;Tutorials Point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog is
&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/control_flow.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dictionaries in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/dictionaries-in-python-3/</link>
      <pubDate>Fri, 11 Nov 2016 13:27:42 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/dictionaries-in-python-3/</guid>
      <description>&lt;p&gt;A dictionary is an unordered set of key-value pairs. A dictionary is indexed by keys, which can be
strings, integers or tuples. A dictionary is like an associative array, if you are familiar with
associative arrays from other programming languages.&lt;/p&gt;

&lt;p&gt;A dictionary can be created in multiple ways, using &lt;code&gt;{}&lt;/code&gt; or the &lt;code&gt;dict()&lt;/code&gt; function. The following are
some examples of ways to create dictionaries:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a=dict(one=1,two=2)
b={&#39;one&#39;:1,&#39;two&#39;:2}
c=dict(zip([&#39;one&#39;,&#39;two&#39;],[1,2]))
d=dict([(&#39;one&#39;,1),(&#39;two&#39;,2)])
e=dict({&#39;one&#39;:1,&#39;two&#39;:2})
print(a==b==c==d==e)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, all the variables hold the same dictionary. To create an empty dictionary, use &lt;code&gt;{}&lt;/code&gt; or
 &lt;code&gt;dict()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I will be using the syntax used to initialize variable &lt;code&gt;b&lt;/code&gt;, as it feels most natural to me.
It&amp;rsquo;s a personal preference, use whichever syntax you are comfortable with.&lt;/p&gt;

&lt;p&gt;There are multiple functions and methods that can be used to perform operations on dictionaries, some of
whose usage is shown in the following examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The operations are fairly straight forward to understand, so I won&amp;rsquo;t explain them in detail.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;Dictionary contents &#39;,a)
Dictionary contents  {&#39;two&#39;: 2, &#39;one&#39;: 1}

print(&#39;len(a) &#39;,len(a))
len(a)  2

print(&#39;a[\&#39;one\&#39;] &#39;,a[&#39;one&#39;])
a[&#39;one&#39;]  1

#changing value associated with &#39;one&#39; key
a[&#39;one&#39;]=11
print(&#39;Dictionary contents after a[\&#39;one\&#39;]=11 &#39;,a)
Dictionary contents after a[&#39;one&#39;]=11  {&#39;two&#39;: 2, &#39;one&#39;: 11}

a[&#39;one&#39;]=1
print(&#39;a[\&#39;one\&#39;]=1 &#39;,&#39;one&#39; in a)
a[&#39;one&#39;]=1  True

#in operator cannot be used to check the existence of values
print(&#39;1 in a &#39;,1 in a)
1 in a  False

#providing a default value if requested key does not exist
print(&#39;a.get(\&#39;three\&#39;,3) &#39;,a.get(&#39;three&#39;,3))
a.get(&#39;three&#39;,3)  3

print(&#39;a.keys() &#39;,a.keys())
a.keys()  dict_keys([&#39;two&#39;, &#39;one&#39;])

print(&#39;a.values() &#39;,a.values())
a.values()  dict_values([2, 1])

print(&#39;a.pop(\&#39;one\&#39;) &#39;,a.pop(&#39;one&#39;))
a.pop(&#39;one&#39;)  1

print(&#39;Dictionary contents &#39;,a)
Dictionary contents  {&#39;two&#39;: 2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read more about operations on dictionaries
&lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#mapping-types-dict&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The objects returned by &lt;code&gt;dict.keys()&lt;/code&gt;, &lt;code&gt;dict.values()&lt;/code&gt; and &lt;code&gt;dict.items()&lt;/code&gt; are &lt;em&gt;view&lt;/em&gt; objects. When the
contents of the dictionary changes, the changes are reflected in the &lt;em&gt;view&lt;/em&gt; objects. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&#39;Dictionary contents &#39;,a)
Dictionary contents  {&#39;two&#39;: 2}

vals=a.values()
print(vals)
dict_values([2])

a[&#39;two&#39;]=22
print(vals)
dict_values([22])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html#dictionaries&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#mapping-types-dict&#34;&gt;Official library reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/dictionaries.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sets in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/sets-in-python-3/</link>
      <pubDate>Thu, 10 Nov 2016 09:21:40 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/sets-in-python-3/</guid>
      <description>&lt;p&gt;A set is an unordered collection with no duplicate elements. Sets are used for membership testing, removing
duplicate entries and performing set operations such as intersection, union and difference.&lt;/p&gt;

&lt;p&gt;There are two built-in set types: set and frozenset. The set type is mutable and the frozenset type is
immutable.&lt;/p&gt;

&lt;p&gt;Set construction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set()&lt;/code&gt; for empty set. &lt;strong&gt;Note:&lt;/strong&gt; {} cannot be used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set(values)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{value1,valuen}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Construction of frozenset is very similar and uses &lt;code&gt;frozenset()&lt;/code&gt; instead of &lt;code&gt;set()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Set examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myset1=set()
print(myset1)
set()

myset2=set(&#39;aaabbcc&#39;)
print(myset2)
{&#39;b&#39;, &#39;a&#39;, &#39;c&#39;}

myset3={&#39;python&#39;,&#39;java&#39;,&#39;c#&#39;,&#39;php&#39;}
print(myset3)
{&#39;c#&#39;, &#39;php&#39;, &#39;java&#39;, &#39;python&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Operators that can be used on sets and frozensets with example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#membership testing
print(&#39;python&#39; in myset3)
True

#find length
print(len(myset3))
4

myset4={&#39;python&#39;,&#39;c++&#39;}

#intersection
print(myset3.intersection(myset4))
{&#39;python&#39;}

#difference
print(myset3.difference(myset4))
{&#39;c#&#39;, &#39;php&#39;, &#39;java&#39;}

#union
print(myset3.union(myset4))
{&#39;php&#39;, &#39;python&#39;, &#39;c#&#39;, &#39;java&#39;, &#39;c++&#39;}

#add element to set
myset4.add(&#39;lisp&#39;)
print(myset4)
{&#39;c++&#39;, &#39;python&#39;, &#39;lisp&#39;}

#remove lement from set
myset4.remove(&#39;c++&#39;)
print(myset4)
{&#39;python&#39;, &#39;lisp&#39;}

#equality testing
print(myset3==myset4)
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Operations that involve modification of set data such as &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt; cannot be used on frozensets.&lt;/p&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/sets.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html#sets&#34;&gt;Official tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset&#34;&gt;Official library reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ranges in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/ranges-in-python-3/</link>
      <pubDate>Wed, 09 Nov 2016 14:00:07 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/ranges-in-python-3/</guid>
      <description>&lt;p&gt;The range is an immutable sequence of numbers. The main advantage of using the range type is that the
memory occupied is fixed irrespective of the size of the range. This is because the actual contents of
the range are not stored, instead they are computed at runtime.&lt;/p&gt;

&lt;p&gt;Ranges can be created using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(stop)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop,step)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Only the 1st and 3rd are constructors. In &lt;code&gt;range(start,stop,step)&lt;/code&gt;, step is an optional
parameter. When step is not specified, what we end up with is &lt;code&gt;range(start,stop)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quick notes about the arguments passed to &lt;code&gt;range()&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;start&lt;/code&gt; is not specified, the default value is 0.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;step&lt;/code&gt; is not specified, the default value is 1.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;step&lt;/code&gt; value cannot be zero, a runtime error will be thrown.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;step&lt;/code&gt; value &lt;em&gt;can&lt;/em&gt; be negative.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stop&lt;/code&gt; is always required to be specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To check the values of a range, convert the range to a list and print the list. Printing a range
directly using &lt;code&gt;print(range_var)&lt;/code&gt; will not display the values in the range, since the values are not stored.&lt;/p&gt;

&lt;p&gt;Some examples to demonstrate the usage of ranges:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#range(stop)
r1=range(10)
print(list(r1))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

#range(start,stop)
r2=range(2,10)
print(list(r2))
[2, 3, 4, 5, 6, 7, 8, 9]

#range(start,stop,step)
r3=range(10,20,2)
print(list(r3))
[10, 12, 14, 16, 18]

#negative step value
r4=range(30,10,-5)
print(list(r4))
[30, 25, 20, 15]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check if a value is present in a range, the &lt;code&gt;in&lt;/code&gt; operator can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r5=range(10,20)
print(15 in r5)
True

print(25 in r5)
False 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The comparison operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; can be used to compare the values of different ranges.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(range(0,4,2)==range(0,3,2))
True

print(range(10)!=range(20))
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source code for today&amp;rsquo;s plog is &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/range.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tuples in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/tuples-in-python-3/</link>
      <pubDate>Tue, 08 Nov 2016 10:48:13 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/tuples-in-python-3/</guid>
      <description>&lt;p&gt;Tuples are immutable sequences of values. The values can be heterogeneous.
The values in a tuple are indexed by integers.&lt;/p&gt;

&lt;p&gt;Tuple construction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; for empty tuple&lt;/li&gt;
&lt;li&gt;Single value in a tuple requires a trailing comma: &lt;code&gt;1,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Comma separated values: &lt;code&gt;1,2,3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;tuple()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Empty tuple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t0=() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single value in a tuple(singleton). Notice the trailing comma.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t1=&#39;a&#39;,
print(t1)
(&#39;a&#39;,) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comma separated values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t2=1,2,3
print(t2)
(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;tuple()&lt;/code&gt; function. Note that it accepts only one argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t3=tuple()
print(t3)
()

#trailing comma not required
t4=tuple(&#39;a&#39;)
print(t4)
(&#39;a&#39;,)

t5=tuple(&#39;abcd&#39;)
print(t5)
(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)

t6=tuple(1234)
TypeError: &#39;int&#39; object is not iterable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tuple()&lt;/code&gt; function does not accept integers as they are not iterable. To understand what iterables are,
refer to the official &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#iterator-types&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tuples are immutable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t2[0]=456
TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tuple packing is the process of packing values into a tuple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t7=123,&#39;abc&#39;,345
print(t7)
(123, &#39;abc&#39;, 345) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tuple unpacking is the opposite.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var1,var2,var3=t7
print(var1)
123
print(var2)
abc
print(var3) 
345
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source code for today&amp;rsquo;s plog is available
&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/tuples.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lists in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/lists-in-python-3/</link>
      <pubDate>Mon, 07 Nov 2016 10:03:00 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/lists-in-python-3/</guid>
      <description>&lt;p&gt;Lists are mutable sequences that are often used to store homogeneous items.&lt;/p&gt;

&lt;p&gt;The items of a list are enclosed in square brackets. Eg: &lt;code&gt;[1,2,3]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The contents of a list can be printed using the &lt;code&gt;print()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;mylist=[1,2,3]
print(mylist)
[1,2,3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following example demonstrates that lists are mutable(can be changed).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylist[0]=99
print(mylist)
[99,2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Lists can be thought of as arrays in some ways, though it is not technically accurate. Mapping between
 indices and list items work similar to those of arrays. The mapping between indices and list items in
action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(mylist[0])
99
print(mylist[1])
2
print(mylist[2])
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator can be used to check if a certain item is present in a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;99 in mylist
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List operations:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator concatenates two lists.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list1=[1,2]
list2=[3,4]
print(list1+list2)
[1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; operator can be used to repeat a list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(list1*3)
[1,2,1,2,1,2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The slice operator &lt;code&gt;:&lt;/code&gt; works as follows: it accepts three parameters: start,end and
increment(default is 1, and can be omitted) . The following example demonstrates the behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list3=[1,2,3,4,5]
print(list3[2:5] #inclusive of start and excludes end
[3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many list methods such as &lt;code&gt;append()&lt;/code&gt;,&lt;code&gt;pop()&lt;/code&gt;,&lt;code&gt;reverse()&lt;/code&gt;. The details can be found
&lt;a href=&#34;https://docs.python.org/3/tutorial/datastructures.html#more-on-lists&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will briefly mention list traversal, which uses &lt;code&gt;for&lt;/code&gt; loops. I will cover &lt;code&gt;for&lt;/code&gt; loops in detail in an
upcoming blog.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list4=[8,9,10]
for num in list4:
    print(num)
8
9
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the indices of the elements are required:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for ix, num in enumerate(list4):
    print(&#39;Index : {} ,value : {}&#39;.format(ix, num))
Index :  0  Value :  8
Index :  1  Value :  9
Index :  2  Value :  10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;enumerate()&lt;/code&gt; function is used to traverse the list and obtain the index of each element.&lt;/p&gt;

&lt;p&gt;A few notes about lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are mutable, so be careful when making changes in-place without saving the original contents&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;len()&lt;/code&gt; function can be used on lists to find the length&lt;/li&gt;
&lt;li&gt;Strings can be converted to lists using &lt;code&gt;list(string_variable)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for today&amp;rsquo;s plog can be viewed
&lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/lists.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Strings in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/strings-in-python-3/</link>
      <pubDate>Sun, 06 Nov 2016 07:35:00 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/strings-in-python-3/</guid>
      <description>&lt;p&gt;Strings are sequences of characters.&lt;/p&gt;

&lt;p&gt;Strings can be written in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;single quotes&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;double quotes&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;lsquo;multi line&amp;rdquo;&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Escape sequences are used to display characters with a special meaning such as &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt; , &lt;code&gt;\&lt;/code&gt; within a string.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\&lt;/code&gt; displays &lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt; displays &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&#39;&lt;/code&gt; displays &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt; displays a new line (LF)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Further reading about escape sequences &lt;a href=&#34;https://docs.python.org/3/reference/lexical_analysis.html#strings&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To find the length a string, the &lt;code&gt;len()&lt;/code&gt; function can be used.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;len(&#39;String&#39;)
6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To convert other datatypes to a string, the &lt;code&gt;str()&lt;/code&gt; function can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;mystr=str(100)
type(mystr)
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are built in methods available to perform common operations/transformations in  Python. Some of them can be found &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#string-methods&#34;&gt;here&lt;/a&gt;. I won&amp;rsquo;t show the usage of the functions here though.&lt;/p&gt;

&lt;p&gt;I will talk about slicing strings very briefly. A slice is a segment of the string. The following code demonstrates how to slice a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;slice_example=&#39;string contents&#39;
print(slice_example[3:12])
ing conte
print(slice_example[:10])
string con
print(slice_example[4:])
ng contents
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The operator &lt;code&gt;[n:m]&lt;/code&gt; returns the string from the n-th character to the m-th character, including the n-th character and excluding the m-th character. If &lt;code&gt;n&lt;/code&gt; is omitted, it starts from the first character. If &lt;code&gt;m&lt;/code&gt; is omitted, it ends with the last character.&lt;/p&gt;

&lt;p&gt;An important property of strings is that, they are immutable. The following example demonstrates this property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;s=&#39;abc&#39;
s[0]=&#39;x&#39;
TypeError: &#39;str&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To learn more about text processing refer this &lt;a href=&#34;https://docs.python.org/3/library/text.html#textservices&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A quick note about why I am not explaining all the string processing services and string methods: I just need to know, at a high level, what string processing resources exist and where to find them when the need arises. Spending time trying out all the methods and services is not very efficient or interesting. Let me reiterate that I will be learning on the fly.&lt;/p&gt;

&lt;p&gt;Code for today&amp;rsquo;s plog is available &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/strings.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data types in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/data-types-in-python-3/</link>
      <pubDate>Sat, 05 Nov 2016 07:26:45 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/data-types-in-python-3/</guid>
      <description>&lt;p&gt;Python is a dynamically typed programming language, so you don&amp;rsquo;t need to explicitly specify the data type of a variable before usage. A variable can be rebound to objects of different data types at runtime and the Python interpreter will not complain.&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;var=10
print(var)
10
var=&#39;string&#39;
print(var)
string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The following are the data types available in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Boolean - True and False&lt;/li&gt;
&lt;li&gt;int and float&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;tuple&lt;/li&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not an exhaustive list, just the list of types I am guessing are most relevant to me for Machine learning and building web apps. For the complete list refer this &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#mapping-types-dict&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following values are considered Falsey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;False&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;{},&amp;ldquo;,(),[]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All other values can be considered truthy.&lt;/p&gt;

&lt;p&gt;What is the difference between true and false vs truthy and falsey?&lt;/p&gt;

&lt;p&gt;True and False are boolean values.
Truthy and Falsey values are terms to describe how objects will be evaluated as True and False values in the context of &lt;code&gt;if&lt;/code&gt; conditions. A better explanation can be found on &lt;a href=&#34;http://stackoverflow.com/questions/10440792/why-does-false-evaluate-to-false-when-if-not-succeeds&#34;&gt;Stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To quickly check the truthiness or falsiness of objects, use &lt;code&gt;bool(data)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;if not bool(()):
	print(&#39;() is falsey&#39;)
if not bool([]):
	print(&#39;[] is falsey&#39;)
if not bool({}):
	print(&#39;{} is falsey&#39;)
if not bool(&#39;&#39;):
	print(&#39;\&#39;\&#39; is falsey&#39;)
if not bool(None):
	print(&#39;None is falsey&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;() is falsey
[] is falsey
{} is falsey
&#39;&#39; is falsey
None is falsey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All other values can be considered truthy.&lt;/p&gt;

&lt;p&gt;To check the datatype of an object, use &lt;code&gt;type(value)&lt;/code&gt;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;type(0)
&amp;lt;class &#39;int&#39;&amp;gt;
type(&#39;text&#39;)
&amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moving on to integers and floats.&lt;/p&gt;

&lt;p&gt;Integers are just whole numbers. So you can have positive and negative values but not fractions. Examples: 10,1414,524123,-1414.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myint=100&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The cool thing about integers in Python is that the maximum value is only limited by the available system memory on the device running the code. Coming from Java, it&amp;rsquo;s a welcome change, especially when dealing with large numbers (I encountered this problem in programming challenges online).&lt;/p&gt;

&lt;p&gt;The standard operators can be used on integers such as *,/,+,-,**.&lt;/p&gt;

&lt;p&gt;(I will blog about operators later).&lt;/p&gt;

&lt;p&gt;Floating point numbers can handle precision after the decimal point. Examples 6.2, 24.3.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;myfloat=24123.324&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Float is implemented using double in C. To check the maximum float value your system supports, type in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;sys.float_info.max
1.7976931348623157e+308
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second line is the result on my system.&lt;/p&gt;

&lt;p&gt;Comments in python start with a #.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#single line comment&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Find the code for todays plog &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/datatypes.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The upcoming blogs will explore more built in data types.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beginning Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/beginning-python-3/</link>
      <pubDate>Fri, 04 Nov 2016 15:09:38 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/beginning-python-3/</guid>
      <description>&lt;p&gt;In this series of plogs, I will be sharing my journey of learning Python.&lt;/p&gt;

&lt;p&gt;What are my motivations behind deciding to learn Python?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I plan to build web apps, so I was looking for a language which has a mature ecosystem around it. Coming from a Java and PHP background, Python seemed attractive.&lt;/li&gt;
&lt;li&gt;A little later, I plan on getting into Machine Learning, and the most popular language in the industry seems to be Python. It&amp;rsquo;s actually Python 2.7 as of writing this, but Python 3 support is growing. Oh, I did not mention it, but this plog series is going to focus on Python 3 only.&lt;/li&gt;
&lt;li&gt;Python can be used for web scraping with ease, which is of great interest to me.&lt;/li&gt;
&lt;li&gt;It is respected among the hacker community. Just to be clear, hacker means an expert in their field, not the negative association that is triggered more often than not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Reading the above list, many languages can technically fit into those criteria, except the Machine Learning part.&lt;/p&gt;

&lt;p&gt;A quick glance of Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High level&lt;/li&gt;
&lt;li&gt;Interpreted&lt;/li&gt;
&lt;li&gt;Dynamic typing system&lt;/li&gt;
&lt;li&gt;Automatic garbage collection&lt;/li&gt;
&lt;li&gt;Supports multiple programming paradigms, such as object oriented, functional and imperitive&lt;/li&gt;
&lt;li&gt;Code readablity, which is a nice change coming from Java and PHP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am running Ubuntu 16.04, which has Python 2.7.12 and Python 3.5.2 pre-installed. If you are running a different OS, check this &lt;a href=&#34;https://docs.python.org/3/using/index.html&#34;&gt;link&lt;/a&gt; to setup and use Python.&lt;/p&gt;

&lt;p&gt;The Python interpreter can be started, by typing the following in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Python 3 interpreter is running, where I can type in Python code and have it execute immediately.&lt;/p&gt;

&lt;p&gt;The obligatory Hello World program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;print(&#39;Hello World&#39;)
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hello world is displayed in the terminal.&lt;/p&gt;

&lt;p&gt;Another way of running programs is by saving the code into a file and running it with python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;touch hello.py
gedit hello.py
#type the program
python3 hello.py
#output
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source code is available &lt;a href=&#34;https://github.com/ploggingdev/python_learn/blob/master/hello.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Python_(programming_language)#Features_and_philosophy&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/&#34;&gt;Python 3 official docs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.ploggingdev.com/2016/11/hello-world/</link>
      <pubDate>Fri, 04 Nov 2016 14:37:53 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/hello-world/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hi!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is it called Plogging Dev?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plog is supposed to mean programming blog (it&amp;rsquo;s a real word with a made up meaning). The Dev part is for developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is this blog about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will be sharing my programming related blogs here, mostly Python and Django to start with, then blogs about machine learning. You can expect the occasional non-tech blog post, mostly whatever I am interested in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you an expert on Python, Django, or machine learning?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No, no and no. I plan to learn about the mentioned technologies and blog about my journey as I learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is your site hosted?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The site is hosted behind Cloudflare, on Github pages with a custom domain.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.ploggingdev.com/about/</link>
      <pubDate>Fri, 04 Nov 2016 11:02:36 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/about/</guid>
      <description>&lt;p&gt;Welcome to my blog!&lt;/p&gt;

&lt;p&gt;plog = programming blog&lt;/p&gt;

&lt;p&gt;I write about programming and tech related topics, though occasionally I might explore other topics I find interesting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where is the site hosted?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The site is hosted on Github Pages, behind Cloudflare. Comments are powered by &lt;del&gt;disqus&lt;/del&gt; &lt;a href=&#34;https://www.hostedcomments.com/&#34;&gt;Hosted Comments&lt;/a&gt;, which I built as a privacy oriented alternative to disqus. The site also uses Google Analytics.&lt;/p&gt;

&lt;p&gt;This static site is built with Hugo and uses the beautifulhugo theme.&lt;/p&gt;

&lt;p&gt;Email address : ploggingdev at gmail&lt;/p&gt;

&lt;p&gt;Twitter and github handles are in the footer.&lt;/p&gt;

&lt;p&gt;You might be interested in reading the following posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/hello-world/&#34;&gt;Hello World&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ploggingdev.com/2016/11/beginning-python-3/&#34;&gt;Beginning Python 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>