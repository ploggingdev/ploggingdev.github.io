<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Plogging Dev</title>
    <link>https://www.ploggingdev.com/post/</link>
    <description>Recent content in Posts on Plogging Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Plogging Dev - Powered by &lt;a href=&#39;https://gohugo.io/&#39;&gt;Hugo&lt;/a&gt; Theme by &lt;a href=&#39;https://github.com/ribice/kiss&#39;&gt;Kiss&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 08 Jul 2018 01:01:38 -0400</lastBuildDate>
    
	<atom:link href="https://www.ploggingdev.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thoughts on Reddit and it&#39;s redesign</title>
      <link>https://www.ploggingdev.com/2018/07/thoughts-on-reddit-and-its-redesign/</link>
      <pubDate>Sun, 08 Jul 2018 01:01:38 -0400</pubDate>
      
      <guid>https://www.ploggingdev.com/2018/07/thoughts-on-reddit-and-its-redesign/</guid>
      <description>&lt;p&gt;I opted in to reddit&amp;rsquo;s redesign and used it for an entire month to see how it compares to the existing design. After a month of using the redesigned site, I went back to the old design. I wanted to share my experience using the redesigned site, what works, what doesn&amp;rsquo;t and try and understand some of the motivations for redesigning the entire site.&lt;/p&gt;

&lt;p&gt;A little context is required to understand why reddit is redesigning the entire site. Reddit CEO Steve Huffman was asked about the goals of the redesign and this is what he had to &lt;a href=&#34;https://www.reddit.com/r/announcements/comments/7a4bjo/time_for_my_quarterly_inquisition_reddit_ceo_here/dp70sul/&#34;&gt;say&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The strange launch of Hackers Chat</title>
      <link>https://www.ploggingdev.com/2018/01/the-strange-launch-of-hackers-chat/</link>
      <pubDate>Sun, 21 Jan 2018 01:04:38 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2018/01/the-strange-launch-of-hackers-chat/</guid>
      <description>&lt;p&gt;I recently launched &lt;a href=&#34;https://www.hackerschat.net/&#34;&gt;Hackers Chat&lt;/a&gt; as an experiment to build the community site that I wish existed : public chat room based communites, pseudonymous users, transparent moderation logs, an open source code base and a site that is welcoming to non-technical users. I launched it as a single chat room for all discussions and support for user created chat rooms will be added shortly. An analogy might help : &lt;em&gt;Reddit for chat rooms&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I originally launched the site under the name &lt;a href=&#34;https://www.boredhackers.com&#34;&gt;Bored Hackers&lt;/a&gt; , on the 1st of January, 2018 to an underwhelming response. The site didn&amp;rsquo;t get traction in any of the communities where I posted, yet what followed was an interesting series of events. Someone noticed that the chat room didn&amp;rsquo;t have basic anti-spam measures and posted a link to 4chan asking for help in spamming the chat room. Soon, the trolls and spammers showed up and started posting links to porn, messages about Hitler and other offensive content.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a chat room using Django Channels</title>
      <link>https://www.ploggingdev.com/2017/11/building-a-chat-room-using-django-channels/</link>
      <pubDate>Wed, 01 Nov 2017 05:38:38 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/11/building-a-chat-room-using-django-channels/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; : Code is on &lt;a href=&#34;https://github.com/ploggingdev/djangochat&#34;&gt;Github&lt;/a&gt;. In this post I explain how you can build a chat room using &lt;a href=&#34;https://channels.readthedocs.io/en/stable/index.html&#34;&gt;Django Channels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A standard Django application handles &lt;code&gt;http&lt;/code&gt; requests using a request-response lifecycle. A request is sent from the user&amp;rsquo;s browser, Django calls the relevant view which then returns a response to the user. The request-response lifecycle has certain limitations though : it&amp;rsquo;s not great for realtime applications which usually require communicating with the backend server frequently. New standards such as websockets and HTTP2 address some of these shortcomings. WebSockets is a recent communications protocol which provides full-duplex communication channels over a single TCP connection and is well suited for realtime applications. Opening and maintaining a websocket connection with a server is very cheap in terms of memory and cpu resources required. To give you some real world numbers, Chris McCord was able to hold &lt;a href=&#34;http://phoenixframework.org/blog/the-road-to-2-million-websocket-connections&#34;&gt;2 million open websocket connections&lt;/a&gt; on a single server with 40 cores and 128 GB of RAM. Though he used the Phoenix framework as the backend of choice instead of Django channels, the important takeaway is that websockets are extremely lightweight full-duplex communication channels.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Online accounts need a clearly defined lifecycle</title>
      <link>https://www.ploggingdev.com/2017/10/online-accounts-need-a-clearly-defined-lifecycle/</link>
      <pubDate>Fri, 06 Oct 2017 03:44:39 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/10/online-accounts-need-a-clearly-defined-lifecycle/</guid>
      <description>&lt;p&gt;As part of a thought experiment, I was thinking about the implications of the internet becoming mainstream in a short time frame. One of the points that came up was the lifecycle of online accounts and their associated data. The lack of a clearly defined lifecycle means that users are at the mercy of each services&amp;rsquo; policies. Some services retain data indefinitely, some services sell user data to third parties for ad targeting and most services don&amp;rsquo;t allow deleting accounts. This is one area where the big tech companies seem reasonable : most allow deleting user accounts and the associated data, but it&amp;rsquo;s unclear what data deletion really means. What happens to the user data stored in the database backups? What happens to the data shared with third parties? Are they instructed to delete data once the upstream user deletes his account?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a Disqus alternative Part 2 : The launch</title>
      <link>https://www.ploggingdev.com/2017/09/building-a-disqus-alternative-part-2--the-launch/</link>
      <pubDate>Wed, 27 Sep 2017 03:42:39 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/09/building-a-disqus-alternative-part-2--the-launch/</guid>
      <description>&lt;p&gt;I finally launched &lt;a href=&#34;https://www.hostedcomments.com/&#34;&gt;Hosted Comments&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;After 3 weeks of development, I finally have the first version up and running. You can scroll to the bottom of this page and see it in action.&lt;/p&gt;

&lt;p&gt;My initial plan was to blog about the process of building Hosted Comments, but I think I am going to skip the part 1, part 2 style in favour of standalone posts talking about specific challenges of building this software.&lt;/p&gt;

&lt;p&gt;So whatâ€™s changed since the last post?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a Disqus alternative Part 1 : Research</title>
      <link>https://www.ploggingdev.com/2017/08/building-a-disqus-alternative-part-1--research/</link>
      <pubDate>Tue, 29 Aug 2017 03:42:39 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/08/building-a-disqus-alternative-part-1--research/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; : I launched &lt;a href=&#34;https://www.hostedcomments.com/&#34;&gt;Hosted Comments&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start with a little back story : I started this blog around 9 months ago and managed to build up traffic to a few hundred hits every day. It might not seem like much, but it was and still is a big deal to me. Readers used to leave comments with suggestions for improvements, questions or just to say that they enjoyed reading a particular post. Comments were powered by Disqus and all was well. One day I received an email notification from Disqus informing me that someone had left a comment on my blog. A pretty routine notification, so I opened the post and scrolled down to the comments section and noticed&amp;hellip;six shady ads with images to accompany them. Without any warning, Disqus enabled ads on my site. Until then I never really bothered with what Disqus was doing in the background, but the ads incident made me curious. I inspected the requests that Disqus was making and it turns out that 100+ http requests, sending tracking data to 10+ external advertisers and 2MB of data transfer was required to display a comments section with 5 comments! That was my breaking point and so I promptly removed Disqus from my blog and deleted my account as well.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A model for a privacy oriented ad network that profiles content, not users</title>
      <link>https://www.ploggingdev.com/2017/05/a-model-for-a-privacy-oriented-ad-network-that-profiles-content-not-users/</link>
      <pubDate>Mon, 22 May 2017 23:16:24 -0700</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/05/a-model-for-a-privacy-oriented-ad-network-that-profiles-content-not-users/</guid>
      <description>&lt;p&gt;A few days ago I came across a talk by Maciej Ceglowski titled &lt;a href=&#34;https://www.youtube.com/watch?v=rSrLjb3k1II&#34;&gt;Notes from an Emergency&lt;/a&gt;. If you have not watched the talk, stop reading this and go watch it. In the talk, he makes a suggestion that the Government should regulate ads to target content instead of users. There was a &lt;a href=&#34;https://news.ycombinator.com/item?id=14383006&#34;&gt;discussion&lt;/a&gt; about the talk on Hacker News where Maciej said that he feels it&amp;rsquo;s a regulatory argument and not a business argument, in response to a comment that implied ads targeting content will be worse than ads that target users. That got me thinking, are ads that target content worse than ads that target users, looking at it purely from a business perspective? I don&amp;rsquo;t think so, and in fact feel that ads targetting content will be &lt;em&gt;better&lt;/em&gt; from a business perspective. In this post, I propose a model for a privacy oriented ad network that targets content instead of users. This is not a novel proposal and it&amp;rsquo;s likely that people have thought about this over the years.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>concurrent.futures in Python 3</title>
      <link>https://www.ploggingdev.com/2017/01/concurrent.futures-in-python-3/</link>
      <pubDate>Thu, 12 Jan 2017 03:14:07 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/01/concurrent.futures-in-python-3/</guid>
      <description>&lt;p&gt;The concurrent.futures module provides a common high level interface for asynchronously executing callables using pools of threads or processes.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;concurrent.futures.Executor&lt;/code&gt; is a class to execute function calls asynchronously. The important methods are &lt;code&gt;submit(function, args)&lt;/code&gt;, which calls the specified function passing in the given arguments, and &lt;code&gt;map(function, iterables)&lt;/code&gt; which calls the specified function asynchronously passing in each iterable as an argument for a separate function call. This should not be used directly, but is used through its subclasses &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; and &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s jump into an example. The purpose of the following program is to find the sum of all prime numbers until the given number. There are two functions to demonstrate how to use a pool of threads and how to use a pool of processes. &lt;code&gt;sum_primes_thread(nums)&lt;/code&gt; uses threads and &lt;code&gt;sum_primes_process(nums)&lt;/code&gt; uses processes. Notice that the only difference between the two functions is that one uses &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; while the other uses &lt;code&gt;ProcessPoolExecutor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multiprocessing and multithreading in Python 3</title>
      <link>https://www.ploggingdev.com/2017/01/multiprocessing-and-multithreading-in-python-3/</link>
      <pubDate>Mon, 09 Jan 2017 23:03:51 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2017/01/multiprocessing-and-multithreading-in-python-3/</guid>
      <description>&lt;p&gt;To begin with, let us clear up some terminlogy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Concurrency is when two or more tasks can start, run, and complete in overlapping time periods. It doesn&amp;rsquo;t necessarily mean they&amp;rsquo;ll ever both be running at the same instant. Eg. multitasking on a single-core machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parallelism is when two or more tasks are executed simultaneously.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A thread is a sequence of instructions within a process. It can be thought of as a lightweight process. Threads share the same memory space.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A process is an instance of a program running in a computer which can contain one or more threads. A process has its independent memory space.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;threading&lt;/code&gt; module is used for working with threads in Python.&lt;/p&gt;

&lt;p&gt;The CPython implementation has a Global Interpreter Lock (GIL) which allows only one thread to be active in the interpreter at once. This means that threads cannot be used for parallel execution of Python code. While parallel CPU computation is not possible, parallel IO operations are possible using threads. This is because performing IO operations releases the GIL. To learn more about the GIL refer &lt;a href=&#34;http://www.dabeaz.com/python/UnderstandingGIL.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Analyzing programming language statistics of 100,000 Github repositories</title>
      <link>https://www.ploggingdev.com/2016/12/analyzing-programming-language-statistics-of-100000-github-repositories/</link>
      <pubDate>Sun, 25 Dec 2016 23:03:21 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/analyzing-programming-language-statistics-of-100000-github-repositories/</guid>
      <description>&lt;p&gt;The first step is to gather data about 100,000 repositories using the Github api. I used &lt;code&gt;scrapy&lt;/code&gt; for this.&lt;/p&gt;

&lt;p&gt;A high level overview of how I did this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start from the id of my &lt;code&gt;scrape_github&lt;/code&gt; repo &lt;code&gt;https://api.github.com/repositories?since=76761293&amp;amp;access_token=MY_TOKEN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save only the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;languages_url&lt;/code&gt; for each repo. The &lt;code&gt;languages_url&lt;/code&gt; is the api endpoint which contains the programming language statistics of the current repo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract the link to the next page from the &lt;code&gt;Link&lt;/code&gt; header and follow it repeating the above steps.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each api call returns a list of 100 repositories, so to retrieve data about 100,000 repositories, 1000 api calls are required.&lt;/p&gt;

&lt;p&gt;All the output is saved to a file called &lt;code&gt;all_repos.jsonl&lt;/code&gt; which came to around 13MB.&lt;/p&gt;

&lt;p&gt;The next step is to follow the &lt;code&gt;languages_url&lt;/code&gt; api endpoint for each repository and save the data.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scraping my website using requests and BeautifulSoup</title>
      <link>https://www.ploggingdev.com/2016/12/scraping-my-website-using-requests-and-beautifulsoup/</link>
      <pubDate>Thu, 08 Dec 2016 04:48:07 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/scraping-my-website-using-requests-and-beautifulsoup/</guid>
      <description>&lt;p&gt;Ok, I didn&amp;rsquo;t use Scrapy because I am yet to go through it&amp;rsquo;s documentation. I will explore Scrapy in an upcoming blog post.&lt;/p&gt;

&lt;p&gt;Before getting to write code to scrape my website, I will cover the basics of the following modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;webbrowser&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;webbrowser&lt;/code&gt; module is a builtin module in Python . There is not a lot to explore in this module, except the &lt;code&gt;open(url)&lt;/code&gt; method. All it does is open the the default browser to a specified URL.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import webbrowser

urls = [&amp;quot;https://automatetheboringstuff.com/&amp;quot;, &amp;quot;https://automatetheboringstuff.com/chapter11/&amp;quot;]

for link in urls:
   webbrowser.open(link)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Decorators in Python 3</title>
      <link>https://www.ploggingdev.com/2016/12/decorators-in-python-3/</link>
      <pubDate>Sun, 04 Dec 2016 22:29:11 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/decorators-in-python-3/</guid>
      <description>&lt;p&gt;A Python decorator is a specific change to the Python syntax that allows us to conveniently alter functions and methods. In simpler words, a decorator takes in a function, adds some functionality and returns it.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def my_decorator(func):
    def inner():
        print(&amp;quot;Decoration before function call&amp;quot;)
        func()
        print(&amp;quot;Decoration after function call&amp;quot;)

    return inner

@my_decorator
def simple_print():
    print(&amp;quot;Hello from simple_print&amp;quot;)

simple_print()
print()

#output
Decoration before function call
Hello from simple_print
Decoration after function call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Performance measurement in Python 3</title>
      <link>https://www.ploggingdev.com/2016/12/performance-measurement-in-python-3/</link>
      <pubDate>Sat, 03 Dec 2016 21:13:22 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/performance-measurement-in-python-3/</guid>
      <description>&lt;p&gt;Performance measurement is the process of collecting and understanding information regarding the performance of some code.&lt;/p&gt;

&lt;p&gt;In this blog I will cover the basics of the following modules in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;pstats&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;memory_profiler&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>List comprehensions, iterators, generators and generator expressions in Python 3</title>
      <link>https://www.ploggingdev.com/2016/12/list-comprehensions-iterators-generators-and-generator-expressions-in-python-3/</link>
      <pubDate>Fri, 02 Dec 2016 20:54:31 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/12/list-comprehensions-iterators-generators-and-generator-expressions-in-python-3/</guid>
      <description>&lt;p&gt;A list comprehension is a concise way to create lists that would normally require &lt;code&gt;for&lt;/code&gt; loops to build.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list1 = [x**2 for x in range(10)]
print(list1)
#output
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List comprehension to create a list of tuples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list2 = [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
print(list2)
#output
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>N queens solver in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/n-queens-solver-in-python-3/</link>
      <pubDate>Wed, 30 Nov 2016 04:14:07 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/n-queens-solver-in-python-3/</guid>
      <description>&lt;p&gt;What is the N queens problem?&lt;/p&gt;

&lt;p&gt;The N queens problem is the problem of placing N non-attacking queens on an NxN chessboard, for which solutions exist for all natural numbers N with the exception of N=2 and N=3.&lt;/p&gt;

&lt;p&gt;When N=1, the solution is trivial so the program will ask for a value of N such that &lt;code&gt;N &amp;gt;= 4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I will solve this problem using backtracking. There are more efficient ways to solve this problem, but I will use backtracking since it&amp;rsquo;s the most intuitive way to arrive at the solution without getting into the mathematics of arriving at efficient solutions. Through solving these problems, I aim to better understand Python.&lt;/p&gt;

&lt;p&gt;What is backtracking?&lt;/p&gt;

&lt;p&gt;Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons each partial candidate &lt;em&gt;c&lt;/em&gt; (&amp;ldquo;backtracks&amp;rdquo;) as soon as it determines that &lt;em&gt;c&lt;/em&gt; cannot possibly be completed to a valid solution.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Floating point arithmetic issues in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/floating-point-arithmetic-issues-in-python-3/</link>
      <pubDate>Sun, 27 Nov 2016 21:54:01 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/floating-point-arithmetic-issues-in-python-3/</guid>
      <description>&lt;p&gt;By default, numbers having a decimal point are represented as floating point numbers.&lt;/p&gt;

&lt;p&gt;Verification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(type(1.5))
#output
&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Floating point numbers are represented in computer hardware in base 2. Floating point numbers are used to represent decimal (base 10) numbers in the most common use cases. But most decimal fractions cannot be represented exactly as binary fractions.&lt;/p&gt;

&lt;p&gt;To understand this problem, consider the conversion of a decimal fraction to a decimal number: &lt;code&gt;1/3&lt;/code&gt; is equal to &lt;code&gt;0.333...&lt;/code&gt; with repeating 3&amp;rsquo;s. When represented as a decimal number, it will never be equal to &lt;code&gt;1/3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, many decimal numbers cannot be represented accurately in base 2.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(&amp;quot;0.1 + 0.2 = {}&amp;quot;.format(0.1+0.2))
#output
0.1 + 0.2 = 0.30000000000000004

print(&amp;quot;0.1 + 0.4 = {}&amp;quot;.format(0.1+0.4))
#output
0.1 + 0.4 = 0.5

print(&amp;quot;1/10 = {}&amp;quot;.format(1/10))
#output
1/10 = 0.1

print(&amp;quot;Is (0.1 + 0.1 + 0.1 == 0.3) ?&amp;quot;)
print(0.1 + 0.1 + 0.1 == 0.3)
#output
Is (0.1 + 0.1 + 0.1 == 0.3) ?
False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unit testing in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/unit-testing-in-python-3/</link>
      <pubDate>Sun, 27 Nov 2016 01:57:31 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/unit-testing-in-python-3/</guid>
      <description>&lt;p&gt;Unit testing is a method through which the smallest testable units of source code are tested to determine that they behave as expected. The important benefit of writing unit tests is that it enables us to check for any unwanted side effects when we alter the code and correct them.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;unittest&lt;/code&gt; framework is a built-in unit testing framework in Python.&lt;/p&gt;

&lt;p&gt;Some terminology:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test fixture: the preparation needed to perform one or more tests, and any associate cleanup actions&lt;/li&gt;
&lt;li&gt;test case: individual unit of testing which checks for the correct response for a given input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be covering a minimal subset of &lt;code&gt;unittest&lt;/code&gt; that will be enough to understand what unit testing is and how to go about writing test cases. To learn more, refer to the &lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A simple example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import unittest

class Test2(unittest.TestCase):
    
    def test_simple(self):
        self.assertEqual(2+2,4)

if __name__ == &#39;__main__&#39;:
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Errors and exceptions in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/errors-and-exceptions-in-python-3/</link>
      <pubDate>Thu, 24 Nov 2016 23:42:14 -0800</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/errors-and-exceptions-in-python-3/</guid>
      <description>&lt;p&gt;There are two kinds of errors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax errors, where the program contains invalid syntax&lt;/li&gt;
&lt;li&gt;Exceptions, errors that occur during runtime, though the syntax is valid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of built-in exceptions can be found &lt;a href=&#34;https://docs.python.org/3/library/exceptions.html#bltin-exceptions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Syntax errors can be avoided by writing valid code and exceptions can be handled using &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt;. An example of handling an exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def division(num1, num2):
    &amp;quot;&amp;quot;&amp;quot;Return num1/num2&amp;quot;&amp;quot;&amp;quot;
    return num1/num2

try:
    print(division(10,0))
except ZeroDivisionError:
    print(&amp;quot;You can&#39;t divide by zero&amp;quot;)
#output
You can&#39;t divide by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>File IO and JSON in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/file-io-and-json-in-python-3/</link>
      <pubDate>Tue, 22 Nov 2016 17:20:29 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/file-io-and-json-in-python-3/</guid>
      <description>&lt;p&gt;Before discussing file IO and json, let&amp;rsquo;s talk about accepting input from the user using &lt;code&gt;input()&lt;/code&gt;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name = input(&amp;quot;What&#39;s your name?\n&amp;quot;)
age = int(input(&amp;quot;Age?\n&amp;quot;))
print(&amp;quot;Name : {}  Age : {}&amp;quot;.format(name,age))
#output
What&#39;s your name?
plog
Age?
42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading and writing files involves the following three steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the file using &lt;code&gt;open(filename, mode)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read or write from or to the file using &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Close the file using &lt;code&gt;close()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Virtual environments and package management in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/virtual-environments-and-package-management-in-python-3/</link>
      <pubDate>Mon, 21 Nov 2016 21:46:23 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/virtual-environments-and-package-management-in-python-3/</guid>
      <description>&lt;p&gt;A virtual environment is a directory containing a Python installation and any additional packages. Since a virtual environment is isolated, any changes made will not affect the global installation of Python. It also enables the usage of different versions of the same package in multiple virtual environments.&lt;/p&gt;

&lt;p&gt;To create a virtual environment, the &lt;code&gt;venv&lt;/code&gt; module will be used. The &lt;code&gt;virtualenv&lt;/code&gt; module also can be used, but &lt;code&gt;venv&lt;/code&gt; is the officially recommended solution so that&amp;rsquo;s what I will be using. The current Python 3 documentation recommends the usage of &lt;code&gt;pyvenv&lt;/code&gt;, which is a wrapper around &lt;code&gt;venv&lt;/code&gt;. Since &lt;code&gt;pyvenv&lt;/code&gt; will be deprecated soon, avoid using &lt;code&gt;pyvenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Installation of &lt;code&gt;venv&lt;/code&gt; on Ubuntu 16.04:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt install python3-venv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a new virtual environment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 -m venv python_learn_venv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Classes and inheritance in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/classes-and-inheritance-in-python-3/</link>
      <pubDate>Sat, 19 Nov 2016 07:38:24 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/classes-and-inheritance-in-python-3/</guid>
      <description>&lt;p&gt;From Wikipedia: In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods).&lt;/p&gt;

&lt;p&gt;Features of classes in Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple inheritance permitted&lt;/li&gt;
&lt;li&gt;Derived class can override base class methods&lt;/li&gt;
&lt;li&gt;Base class methods can be called using &lt;code&gt;super().method_name()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Class members are dynamic, can be modified at runtime&lt;/li&gt;
&lt;li&gt;Class members are public, methods are virtual (can be overridden)&lt;/li&gt;
&lt;li&gt;The first parameter in a method is a reference to the calling object, usually &lt;code&gt;self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Operator overloading is supported&lt;/li&gt;
&lt;li&gt;Aliasing of objects is supported&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modules and packages in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/modules-and-packages-in-python-3/</link>
      <pubDate>Wed, 16 Nov 2016 14:13:24 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/modules-and-packages-in-python-3/</guid>
      <description>&lt;p&gt;A module is a file that contains Python definitions and statements with a &lt;code&gt;.py&lt;/code&gt; extension. So technically,
all the code that I posted so far has been in the form of modules. Modules are a way to organize code
in Python so that closely related functions and definitions are grouped together into a module.
It makes code reusable.&lt;/p&gt;

&lt;p&gt;A related concept is packages. Packages are just a way to organize modules into a namespace. A package
can be thought of as a directory that contains modules and subpackages. For Python to treat a directory as
a package, a file named &lt;code&gt;__init__.py&lt;/code&gt; is required in the directory. The &lt;code&gt;__init__.py&lt;/code&gt; can also contain
code that will be executed when the package is first imported, typically initialization code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functions in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/functions-in-python-3/</link>
      <pubDate>Sun, 13 Nov 2016 10:30:06 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/functions-in-python-3/</guid>
      <description>&lt;p&gt;A function is a named sequence of statements. Since a function is named, it is reusable. A simple function
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def hello_function():
    &#39;&#39;&#39;This is where the function documentation goes&#39;&#39;&#39;
    print(&#39;Hello from function&#39;)

hello_function()
print(hello_function)
#output
Hello from function
&amp;lt;function hello_function at 0x7f34bc7db378&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;def&lt;/code&gt; keyword is used to define a function.&lt;/li&gt;
&lt;li&gt;It is followed by the function name, argument list(if any), and a
colon &lt;code&gt;:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The function body is indented by 4 spaces.&lt;/li&gt;
&lt;li&gt;The first line of a function body is a
&lt;a href=&#34;https://docs.python.org/3/tutorial/controlflow.html#tut-docstrings&#34;&gt;docstring&lt;/a&gt;,
which is documentation for the function. It&amp;rsquo;s a good practice to always include the docstring.&lt;/li&gt;
&lt;li&gt;The statements that constitute the function are placed after the docstring.&lt;/li&gt;
&lt;li&gt;A function is an object, notice the output of &lt;code&gt;print(hello_function)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Control flow tools in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/control-flow-tools-in-python-3/</link>
      <pubDate>Sat, 12 Nov 2016 11:28:34 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/control-flow-tools-in-python-3/</guid>
      <description>&lt;p&gt;Before I start with control flow tools, here are a few definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Value:&lt;/strong&gt; Basic units of data. Eg- &lt;code&gt;10&lt;/code&gt;,&lt;code&gt;&#39;string&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable:&lt;/strong&gt; A name that refers to a value. Eg- &lt;code&gt;var=10&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt; is the variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Statement:&lt;/strong&gt; A section of code that represents a command or action.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operator:&lt;/strong&gt; A symbol that performs operations on operands. Eg- &lt;code&gt;*&lt;/code&gt; is for multiplication&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expression&lt;/strong&gt; A combination of variables, operators, and values to perform a task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn about operators in Python refer
&lt;a href=&#34;https://www.tutorialspoint.com/python3/python_basic_operators.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the control flow tools are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dictionaries in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/dictionaries-in-python-3/</link>
      <pubDate>Fri, 11 Nov 2016 13:27:42 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/dictionaries-in-python-3/</guid>
      <description>&lt;p&gt;A dictionary is an unordered set of key-value pairs. A dictionary is indexed by keys, which can be
strings, integers or tuples. A dictionary is like an associative array, if you are familiar with
associative arrays from other programming languages.&lt;/p&gt;

&lt;p&gt;A dictionary can be created in multiple ways, using &lt;code&gt;{}&lt;/code&gt; or the &lt;code&gt;dict()&lt;/code&gt; function. The following are
some examples of ways to create dictionaries:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a=dict(one=1,two=2)
b={&#39;one&#39;:1,&#39;two&#39;:2}
c=dict(zip([&#39;one&#39;,&#39;two&#39;],[1,2]))
d=dict([(&#39;one&#39;,1),(&#39;two&#39;,2)])
e=dict({&#39;one&#39;:1,&#39;two&#39;:2})
print(a==b==c==d==e)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, all the variables hold the same dictionary. To create an empty dictionary, use &lt;code&gt;{}&lt;/code&gt; or
 &lt;code&gt;dict()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sets in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/sets-in-python-3/</link>
      <pubDate>Thu, 10 Nov 2016 09:21:40 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/sets-in-python-3/</guid>
      <description>&lt;p&gt;A set is an unordered collection with no duplicate elements. Sets are used for membership testing, removing
duplicate entries and performing set operations such as intersection, union and difference.&lt;/p&gt;

&lt;p&gt;There are two built-in set types: set and frozenset. The set type is mutable and the frozenset type is
immutable.&lt;/p&gt;

&lt;p&gt;Set construction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set()&lt;/code&gt; for empty set. &lt;strong&gt;Note:&lt;/strong&gt; {} cannot be used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set(values)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{value1,valuen}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Construction of frozenset is very similar and uses &lt;code&gt;frozenset()&lt;/code&gt; instead of &lt;code&gt;set()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ranges in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/ranges-in-python-3/</link>
      <pubDate>Wed, 09 Nov 2016 14:00:07 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/ranges-in-python-3/</guid>
      <description>&lt;p&gt;The range is an immutable sequence of numbers. The main advantage of using the range type is that the
memory occupied is fixed irrespective of the size of the range. This is because the actual contents of
the range are not stored, instead they are computed at runtime.&lt;/p&gt;

&lt;p&gt;Ranges can be created using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(stop)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(start,stop,step)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Only the 1st and 3rd are constructors. In &lt;code&gt;range(start,stop,step)&lt;/code&gt;, step is an optional
parameter. When step is not specified, what we end up with is &lt;code&gt;range(start,stop)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quick notes about the arguments passed to &lt;code&gt;range()&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;start&lt;/code&gt; is not specified, the default value is 0.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;step&lt;/code&gt; is not specified, the default value is 1.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;step&lt;/code&gt; value cannot be zero, a runtime error will be thrown.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;step&lt;/code&gt; value &lt;em&gt;can&lt;/em&gt; be negative.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stop&lt;/code&gt; is always required to be specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tuples in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/tuples-in-python-3/</link>
      <pubDate>Tue, 08 Nov 2016 10:48:13 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/tuples-in-python-3/</guid>
      <description>&lt;p&gt;Tuples are immutable sequences of values. The values can be heterogeneous.
The values in a tuple are indexed by integers.&lt;/p&gt;

&lt;p&gt;Tuple construction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; for empty tuple&lt;/li&gt;
&lt;li&gt;Single value in a tuple requires a trailing comma: &lt;code&gt;1,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Comma separated values: &lt;code&gt;1,2,3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;using &lt;code&gt;tuple()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Empty tuple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t0=() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Single value in a tuple(singleton). Notice the trailing comma.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t1=&#39;a&#39;,
print(t1)
(&#39;a&#39;,) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comma separated values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t2=1,2,3
print(t2)
(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lists in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/lists-in-python-3/</link>
      <pubDate>Mon, 07 Nov 2016 10:03:00 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/lists-in-python-3/</guid>
      <description>&lt;p&gt;Lists are mutable sequences that are often used to store homogeneous items.&lt;/p&gt;

&lt;p&gt;The items of a list are enclosed in square brackets. Eg: &lt;code&gt;[1,2,3]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The contents of a list can be printed using the &lt;code&gt;print()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;mylist=[1,2,3]
print(mylist)
[1,2,3] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following example demonstrates that lists are mutable(can be changed).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mylist[0]=99
print(mylist)
[99,2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Strings in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/strings-in-python-3/</link>
      <pubDate>Sun, 06 Nov 2016 07:35:00 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/strings-in-python-3/</guid>
      <description>&lt;p&gt;Strings are sequences of characters.&lt;/p&gt;

&lt;p&gt;Strings can be written in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;single quotes&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;double quotes&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;rdquo;&amp;lsquo;multi line&amp;rdquo;&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Escape sequences are used to display characters with a special meaning such as &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&amp;quot;&lt;/code&gt; , &lt;code&gt;\&lt;/code&gt; within a string.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\\&lt;/code&gt; displays &lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt; displays &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&#39;&lt;/code&gt; displays &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt; displays a new line (LF)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data types in Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/data-types-in-python-3/</link>
      <pubDate>Sat, 05 Nov 2016 07:26:45 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/data-types-in-python-3/</guid>
      <description>&lt;p&gt;Python is a dynamically typed programming language, so you don&amp;rsquo;t need to explicitly specify the data type of a variable before usage. A variable can be rebound to objects of different data types at runtime and the Python interpreter will not complain.&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;var=10
print(var)
10
var=&#39;string&#39;
print(var)
string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beginning Python 3</title>
      <link>https://www.ploggingdev.com/2016/11/beginning-python-3/</link>
      <pubDate>Fri, 04 Nov 2016 15:09:38 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/beginning-python-3/</guid>
      <description>&lt;p&gt;In this series of plogs, I will be sharing my journey of learning Python.&lt;/p&gt;

&lt;p&gt;What are my motivations behind deciding to learn Python?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I plan to build web apps, so I was looking for a language which has a mature ecosystem around it. Coming from a Java and PHP background, Python seemed attractive.&lt;/li&gt;
&lt;li&gt;A little later, I plan on getting into Machine Learning, and the most popular language in the industry seems to be Python. It&amp;rsquo;s actually Python 2.7 as of writing this, but Python 3 support is growing. Oh, I did not mention it, but this plog series is going to focus on Python 3 only.&lt;/li&gt;
&lt;li&gt;Python can be used for web scraping with ease, which is of great interest to me.&lt;/li&gt;
&lt;li&gt;It is respected among the hacker community. Just to be clear, hacker means an expert in their field, not the negative association that is triggered more often than not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.ploggingdev.com/2016/11/hello-world/</link>
      <pubDate>Fri, 04 Nov 2016 14:37:53 +0530</pubDate>
      
      <guid>https://www.ploggingdev.com/2016/11/hello-world/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hi!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is it called Plogging Dev?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plog is supposed to mean programming blog (it&amp;rsquo;s a real word with a made up meaning). The Dev part is for developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is this blog about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will be sharing my programming related blogs here, mostly Python and Django to start with, then blogs about machine learning. You can expect the occasional non-tech blog post, mostly whatever I am interested in.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>